<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>董新的博客</title>
  
  <subtitle>董新的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dongxin03.github.io/"/>
  <updated>2022-06-10T10:30:06.670Z</updated>
  <id>http://dongxin03.github.io/</id>
  
  <author>
    <name>董新</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开始学习vue</title>
    <link href="http://dongxin03.github.io/2022/06/10/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0vue/"/>
    <id>http://dongxin03.github.io/2022/06/10/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0vue/</id>
    <published>2022-06-10T10:30:06.000Z</published>
    <updated>2022-06-10T10:30:06.670Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>节流</title>
    <link href="http://dongxin03.github.io/2020/12/03/%E8%8A%82%E6%B5%81/"/>
    <id>http://dongxin03.github.io/2020/12/03/%E8%8A%82%E6%B5%81/</id>
    <published>2020-12-03T07:42:14.000Z</published>
    <updated>2020-12-03T07:42:57.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>func 要执行的函数<br>delay 多少毫秒执行一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let throttle = (func, delay) =&gt; &#123;</span><br><span class="line">    let prev = Date.now();</span><br><span class="line">    return function() &#123;</span><br><span class="line">        let context = this;</span><br><span class="line">        let args = arguments;</span><br><span class="line">        let now = Date.now();</span><br><span class="line">        if (now - prev &gt;= delay) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            prev = Date.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;func 要执行的函数&lt;br&gt;delay 多少毫秒执行一次&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="js" scheme="http:/dongxin03.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>常用的一些正则</title>
    <link href="http://dongxin03.github.io/2020/12/03/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99/"/>
    <id>http://dongxin03.github.io/2020/12/03/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99/</id>
    <published>2020-12-03T07:32:14.000Z</published>
    <updated>2020-12-03T07:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>是不是正确的手机号<br><code>/^(13[0-9]|14[01456879]|15[0-3,5-9]|16[2567]|17[0-8]|18[0-9]|19[0-3,5-9])\d{8}$/</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;是不是正确的手机号&lt;br&gt;&lt;code&gt;/^(13[0-9]|14[01456879]|15[0-3,5-9]|16[2567]|17[0-8]|18[0-9]|19[0-3,5-9])\d{8}$/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="正则" scheme="http:/dongxin03.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>原生JS使用Blob导出csv文件</title>
    <link href="http://dongxin03.github.io/2020/11/18/%E5%8E%9F%E7%94%9FJS%E4%BD%BF%E7%94%A8Blob%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/"/>
    <id>http://dongxin03.github.io/2020/11/18/%E5%8E%9F%E7%94%9FJS%E4%BD%BF%E7%94%A8Blob%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</id>
    <published>2020-11-18T12:09:38.000Z</published>
    <updated>2020-11-18T12:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>偷来的   怕忘</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let sourceData = &#123;</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">    head: [ &apos;时间&apos;, &apos;成交价格&apos;, &apos;成交数量&apos;, &apos;手续费&apos;, &apos;成交金额&apos;, ],</span><br><span class="line">    data: [</span><br><span class="line">        &#123;time: &apos;2019-10-17 14:54:52&apos;, tradePrice: &apos;30.0022.001.32 TWD&apos;, fee:&apos;0 TWD&apos;, tradeAmount: &apos;660.00&apos;,&#125;,</span><br><span class="line">        &#123;time: &apos;2019-10-17 14:54:36&apos;, tradePrice: &apos;30.0089.005.34 TWD&apos;, fee:&apos;0 TWD&apos;, tradeAmount: &apos;2,670.00&apos;,&#125;,</span><br><span class="line">        &#123;time: &apos;2019-10-17 14:54:07&apos;, tradePrice: &apos;21.00500.0021 TWD&apos;, fee:&apos;0 TWD&apos;, tradeAmount: &apos;10,500.00&apos;,&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">// 格式化</span><br><span class="line">const data = [sourceData.head.join(&apos;,&apos;)].concat(sourceData.data.map(item =&gt; &#123;</span><br><span class="line">    return [</span><br><span class="line">        item.time,</span><br><span class="line">        `&quot;$&#123;item.tradePrice&#125;&quot;`,</span><br><span class="line">        `&quot;$&#123;item.fee&#125;&quot;`,</span><br><span class="line">        `&quot;$&#123;item.tradeAmount&#125;&quot;`,</span><br><span class="line">    ].join(&apos;,&apos;)</span><br><span class="line">&#125;))</span><br><span class="line">// 创建Blob对象 传入一个合适的MIME类型</span><br><span class="line">const blob = new Blob([&apos;\ufeff&apos; + data.join(&apos;\n&apos;)], &#123;type: &apos;text/csv,charset=UTF-8&apos;&#125;); // 参考链接 https://developer.mozilla.org/zh-CN/docs/Web/API/Blob</span><br><span class="line">// 使用 Blob 创建一个指向类型化数组的URL</span><br><span class="line">const csvUrl = URL.createObjectURL(blob); // 参考链接 https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</span><br><span class="line">let link = document.createElement(&apos;a&apos;); </span><br><span class="line">link.download = `details_$&#123;new Date().getTime()&#125;.csv`; //文件名字 </span><br><span class="line">link.href = csvUrl;</span><br><span class="line">// 触发下载</span><br><span class="line">link.click();</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">genUrl(encoded, options) &#123;</span><br><span class="line">     const dataBlob = new Blob([`\ufeff$&#123;encoded&#125;`], &#123; type: &apos;text/plain;charset=utf-8&apos; &#125;);//返回的格式</span><br><span class="line">     return window.URL.createObjectURL(dataBlob);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">downloadByPeople()&#123;</span><br><span class="line"></span><br><span class="line">      this.$http.FileGet(this.pageParams).then(res =&gt; &#123;</span><br><span class="line">      const url = this.genUrl(res.data.data.workhour_csv_data, &#123;&#125;);//&#123;&#125;指的是表头，res.data.data.workhour_csv_data是后台返 回来的数据</span><br><span class="line">     const a = document.createElement(&apos;a&apos;);</span><br><span class="line">     a.href = url;</span><br><span class="line">     a.download = &quot;工时统计文件.csv&quot;;</span><br><span class="line">     a.click();</span><br><span class="line">     window.URL.revokeObjectURL(url);</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><hr><hr><p>注意事项：</p><ol><li><p>数据中存在 ‘,’  逗号问题处理：将整个数据用双引号(英文格式)包裹起来，这样会显示成一个单元格。</p></li><li><p>拼接后的数据如何直接下载，不需要用户在操作：动态创建a标签，并调用点击事件</p></li><li><p>中文乱码解决方案：在数据前面加上字符串”\ufeff”即可</p></li></ol><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;偷来的   怕忘&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="web" scheme="http:/dongxin03.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>webpack 4.0 整理</title>
    <link href="http://dongxin03.github.io/2020/08/28/webpack4.0%E6%95%B4%E7%90%86/"/>
    <id>http://dongxin03.github.io/2020/08/28/webpack4.0%E6%95%B4%E7%90%86/</id>
    <published>2020-08-28T02:06:18.000Z</published>
    <updated>2020-08-28T00:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="整理-webpack-3-0"><a href="#整理-webpack-3-0" class="headerlink" title="整理 webpack 3.0"></a>整理 webpack 3.0</h2><hr><h4 id="1、-安装"><a href="#1、-安装" class="headerlink" title="1、 安装"></a>1、 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 新建文件夹进入</span><br><span class="line">npm init</span><br><span class="line">npm install --save-dev webpack   // 在生产环境安装 webpack</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;整理-webpack-3-0&quot;&gt;&lt;a href=&quot;#整理-webpack-3-0&quot; class=&quot;headerlink&quot; title=&quot;整理 webpack 3.0&quot;&gt;&lt;/a&gt;整理 webpack 3.0&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;1、-安装&quot;&gt;
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="webpack" scheme="http:/dongxin03.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用方法</title>
    <link href="http://dongxin03.github.io/2020/08/28/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://dongxin03.github.io/2020/08/28/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-28T00:24:11.000Z</published>
    <updated>2020-08-28T00:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>hexo文档<a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a></li><li>排除故障<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a></li><li>hexo github<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</li></ul><h3 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;hexo文档&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;排除故障&lt;a href=&quot;https://hexo.io/docs/t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mac笔记本的基本命令</title>
    <link href="http://dongxin03.github.io/2020/08/24/mac%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://dongxin03.github.io/2020/08/24/mac%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-24T02:06:18.000Z</published>
    <updated>2020-08-28T00:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1、-位置"><a href="#1、-位置" class="headerlink" title="1、 位置"></a>1、 位置</h3><ul><li>驱动所在位置： /Systme/Library/Extensions</li><li>用户文件夹位置：/User/用户名，可以用波浪号(~)表示</li><li>桌面位置：/User/用户名/Desktop，可以用~/Desktop表示</li></ul><h3 id="2、清理"><a href="#2、清理" class="headerlink" title="2、清理"></a>2、清理</h3><ul><li>按天进行清理：sudo periodic daily</li><li>按每周进行清理：sudo periodic weekly</li><li>按每月进行清理：sudo periodic monthly</li><li>按上面3种情况进行清理：sudo periodic daily weekly monthly<h3 id="3、命令"><a href="#3、命令" class="headerlink" title="3、命令"></a>3、命令</h3>1、cd 进入文件夹<br>2、ls 显示文件夹内容<br>3、pwd 显示当前的目录路径<br>4、ls -la 显示文件夹详细信息<br>5、ls -A 显示文件夹内内容（包括.开头）<br>6、mkdir 创建文件夹<br>7、touch 创建文件<br>8、mvdir 移动文件夹<br>9、rm 删除文件或空文件夹<br>10、rm -rf 删除非空文件夹<br>11、rmdir 删除空文件夹<br>12、cp 复制文件或文件夹<br>13、find 使用匹配表达式查找文件<br>14、open 使用默认程序打开文件<br>15、cat 显示 文件内容<br>16、ln 为文件创建连接<br>17、head 显示文件的最初几行 head -20 file<br>18、tail 显示文件的最后几行<br>19、paste 横向拼接文件内容<br>20、diff 比较并显示两个文件的内容差异<br>21、wc 统计文件的字符数、词数和行数<br>22、uniq 去掉文件中的重复行<br>23、grep 通过简单正则表达式搜索文件</li></ul><hr><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rw-r--r--@ 1 xz staff 42233727 7 19 16:30 powerBi.pbix</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">语法</th><th align="center">属性</th><th align="center">含义说明</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">文件类型</td><td align="center">横杠表示普通文件，若为<strong>d</strong>表示文件夹</td></tr><tr><td align="center">rw-r–r–</td><td align="center">访问权限</td><td align="center">分3组：用户、群组和其他用户的文件访问权限</td></tr><tr><td align="center">1</td><td align="center">文件数量</td><td align="center">文件数量</td></tr><tr><td align="center">xz</td><td align="center">所在用户</td><td align="center">用户</td></tr><tr><td align="center">staff</td><td align="center">所在群组</td><td align="center">群组</td></tr><tr><td align="center">42233727</td><td align="center">文件大小</td><td align="center">字节数（B）</td></tr><tr><td align="center">7 9 16:30</td><td align="center">修改日期</td><td align="center">日期</td></tr></tbody></table><hr><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p>   1、sudo 获取root sudo -s<br>   2、control+D 或 exit 提出root<br>   3、clear 清除屏幕或窗口内容<br>   4、ping 发送回应请求<br>   5、man 查看命令说明 man ls<br>   6、which 查看指定程序的路径 which python<br>   7、history 列出最近执行过的命令及编号<br>   8、hostname 电脑在网络中的名称<br>   9、env 显示当前所有设置过的环境变量<br>   10、passwd 修改用户密码<br>   11、date 显示系统的当前日期和时间<br>   12、cal 显示日历<br>   13、time 统计程序的执行时间<br>   14、lsof -i tcp:4000 查看端口是否被占用<br>   15、kill -9 PID 终止进程</p><hr><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>Command + Tab： 应用程序之间的切换</li><li>Command + Option + ←→：同一应用程序不同窗口切换</li><li>Command + H：隐藏窗口</li><li>Command + M：最小化窗口</li><li>Command + W：关闭页面窗口</li><li>Command + Q：关闭应用程序</li><li>Command + F3：显示桌面</li><li>Command + Shift + 4：截图插件</li><li>Command + Shift + 3：截当前屏幕</li></ul><hr><p>   <strong>文本编辑常用快捷键</strong></p><ul><li>Fn + ↑ ：向上一页</li><li>Fn + ↓ ：向下一页</li><li>Fn + ←：文稿开头</li><li>Fn + →：文稿结尾</li><li>Command + ←：本行开头</li><li>Command + →：本行结尾</li><li>Option + ←：上一个单词末尾</li><li>Option + →：下一个单词末尾</li><li>Ctrl + A：段落开头</li><li>Command + C/V/X/A/S：复制/粘贴/剪切/全选/保存</li><li>Command + Shift + S：另存为</li><li>Command + Z：撤回</li><li>Command + Shift + Z：逆向撤回（前进）</li></ul><hr><p>   <strong>Xcode中常用的快捷键</strong></p><ul><li>Command + 0：打开/关闭导航器面板</li><li>Command + 1 ~ 8：对应导航器面板的各功能（Xcode左边栏的八项功能）</li><li>Command + Shift + F：find，查找</li><li>Command + Shift + O：快速查找并跳转和打开</li><li>Command + Ctrl + ↑：.h、.m文件之间切换</li><li>Ctrl + 6：显示当前目录下的子文件或者当前文档的函数名称进行快速定位和切换</li><li>Command + R：不中断运行</li><li>Command + B：构建</li><li>Command + Shift + K：清除</li><li>Command + Shift + 0（zero）：打开文档与帮助</li><li>Option + 双击 ：跳转到鼠标对应类或方法的文档</li><li>Command + 单击：跳转到鼠标定位处的函数或类的定义处</li><li>Ctrl + 1：弹出View选择面板，可以选择查看当前类的父类、子类 、调用类和被调用类等详细信息</li><li>Command + Shift + Y：显示/隐藏调试区</li><li>Command + .（点）：停止调试器</li><li>Option + ←：上一个单词末尾</li><li>Option + →：下一个单词末尾</li><li>Command + Z：撤回</li><li>Command + Shift + Z：逆向撤回（前进</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;1、-位置&quot;&gt;&lt;a href=&quot;#1、-位置&quot; class=&quot;headerlink&quot; title=&quot;1、 位置&quot;&gt;&lt;/a&gt;1、 位置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;驱动所在位置： /Systme/Library/Extensions&lt;/li&gt;
&lt;li&gt;用户文
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="mac" scheme="http:/dongxin03.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>ES6ES7ES8</title>
    <link href="http://dongxin03.github.io/2020/08/18/ES6ES7ES8/"/>
    <id>http://dongxin03.github.io/2020/08/18/ES6ES7ES8/</id>
    <published>2020-08-18T12:09:38.000Z</published>
    <updated>2020-09-01T02:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h4 id="1、let-amp-const-amp-顶层对象"><a href="#1、let-amp-const-amp-顶层对象" class="headerlink" title="1、let &amp; const &amp; 顶层对象"></a>1、let &amp; const &amp; 顶层对象</h4><ul><li><code>let</code> 和var类似，但只在let命令所在的代码块内有效（没有变量提升）(暂时性死区)（不允许重复声明）<br> <strong>用let声明的变量，在声明之前使用都会报错</strong></li><li><code>const</code> 声明一个只读的常量，一旦声明，常量的值就不能改变。（不允许重复声明）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const foo = &#123;&#125;</span><br><span class="line">foo.a = 3; // 可以</span><br><span class="line">foo = &#123;a:3&#125;; // 不行  指向的地址不能改变</span><br><span class="line">// 可以使用Object.freeze(&#123;&#125;) 冻结对象</span><br></pre></td></tr></table></figure></li><li><code>顶层对象</code> window global <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">window.a // 1</span><br><span class="line">let b == 2;</span><br><span class="line">window.b // undefined</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="2、结构赋值"><a href="#2、结构赋值" class="headerlink" title="2、结构赋值"></a>2、结构赋值</h4><ul><li>数组的结构赋值<br>本质上，只要等号两边的模式相同，左边的变量就会赋予对应的值。如果结构不能成，变量的值就等于undefined（如果等号右边不是数组将会报错）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let [foo,[[bar],baz]] = [1,[[2],3]];</span><br><span class="line">foo // 1</span><br><span class="line">bar // 2</span><br><span class="line">baz // 3</span><br></pre></td></tr></table></figure>可以给默认值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [foo = &apos;a&apos;] = [];</span><br><span class="line">foo // &apos;a&apos;</span><br></pre></td></tr></table></figure></li><li>对象的结构赋值<br>变量必须与属性同名才能取到正确的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123;foo,baz&#125; = &#123;foo:&apos;a&apos;,bar:&apos;b&apos;&#125;;</span><br><span class="line">foo // &apos;a&apos;</span><br><span class="line">baz // undefined</span><br></pre></td></tr></table></figure>也可以嵌套结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    p:[</span><br><span class="line">        &apos;a&apos;,</span><br><span class="line">        &#123;y:&apos;b&apos;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line">let &#123;p:[foo,&#123;y&#125;]&#125; = obj;</span><br><span class="line">foo // &apos;a&apos;</span><br><span class="line">y // &apos;b&apos;</span><br></pre></td></tr></table></figure></li><li>字符串的结构赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c,d,e] = &apos;hello&apos;;</span><br><span class="line">a // &apos;h&apos;</span><br><span class="line">b // &apos;e&apos;</span><br></pre></td></tr></table></figure>也可以对属性结构赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123;length : len&#125; = &apos;hello&apos;;</span><br><span class="line">length // 5</span><br></pre></td></tr></table></figure></li><li>数值和布尔值的结构赋值<br>如果等号右边的是数值和布尔，则会先转为对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;toString : s&#125; = 123;</span><br><span class="line">s === Number.prototype.toString // true</span><br><span class="line">let &#123;toString : s&#125; = true;</span><br><span class="line">s === Boolean.prototype.toString // true</span><br></pre></td></tr></table></figure>undefined 和 null 无法转为对象，所以对他们进行结构赋值会报错</li><li>函数参数的结构赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function add([x,y])&#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">add([1,2]) // 3</span><br><span class="line"></span><br><span class="line">[[1,2],[3,4]].map(([a,b])=&gt;a+b) // [3,7]</span><br></pre></td></tr></table></figure></li><li><em>结构赋值少使用圆括号，会报错*</em></li></ul><hr><h4 id="3、字符串的-方法和扩展"><a href="#3、字符串的-方法和扩展" class="headerlink" title="3、字符串的 方法和扩展"></a>3、字符串的 方法和扩展</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">anchor</td><td align="left">创建一个 <code>&lt;a name=&quot;传入的参数&quot;&gt;字符串&lt;/a&gt;</code></td></tr><tr><td align="left">big</td><td align="left">创建一个<code>&lt;big&gt;字符串&lt;/big&gt;</code>大号字体显示</td></tr><tr><td align="left">charAt</td><td align="left">返回指定位置的字符</td></tr><tr><td align="left">charCodeAt</td><td align="left">返回指定位置的Unicode编码</td></tr><tr><td align="left">concat</td><td align="left">拼接字符串</td></tr><tr><td align="left">fromCharCode</td><td align="left">从字符编码创建一个字符串<code>String.fromCharCode(102)</code> == f</td></tr><tr><td align="left">indexOf</td><td align="left">检索字符串 返回lin</td></tr><tr><td align="left">lastIndexOf</td><td align="left">从后检索字符串 返回lin</td></tr><tr><td align="left">italics</td><td align="left"><code>&lt;i&gt;字符串&lt;/i&gt;</code></td></tr><tr><td align="left">link</td><td align="left"><code>&lt;a href=&quot;参数&quot;&gt;字符串&lt;/a&gt;</code></td></tr><tr><td align="left">localeCompare</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match</td><td align="left">正则表达式匹配 返回array</td></tr><tr><td align="left">replace</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search</td><td align="left">检索与正则表达式相匹配的值 返回lin</td></tr><tr><td align="left">slice</td><td align="left">提取字符串的片段，并在心的字符串中返回被提取的部分（截取）</td></tr><tr><td align="left">small</td><td align="left"><code>&lt;small&gt;字符串&lt;/small&gt;</code>小一号字体显示</td></tr><tr><td align="left">split</td><td align="left">把字符串分割为字符串数组</td></tr><tr><td align="left">strike</td><td align="left"><code>&lt;strike&gt;字符串&lt;/strike&gt;</code> 删除线</td></tr><tr><td align="left">sub</td><td align="left"><code>&lt;sub&gt;字符串&lt;/sub&gt;</code> 下标</td></tr><tr><td align="left">sup</td><td align="left"><code>&lt;sup&gt;字符串&lt;/sup&gt;</code> 上标</td></tr><tr><td align="left">substr</td><td align="left">从第几个索引开始提取几个</td></tr><tr><td align="left">substring</td><td align="left">提取字符串中两个指定索引号之间的字符</td></tr><tr><td align="left">toLocaleLowerCase</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toLocaleUpperCase</td><td align="left">把字符串转换为大些</td></tr><tr><td align="left">toLowerCase</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toUpperCase</td><td align="left">把字符串转换为大些</td></tr><tr><td align="left">toString</td><td align="left">返回字符串</td></tr><tr><td align="left">valueOf</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><hr><ul><li><p>字符的Unicode表示法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;\z&apos; === &apos;z&apos; // true</span><br><span class="line">&apos;\172&apos; === &apos;z&apos; // true</span><br><span class="line">&apos;\x7A&apos; === &apos;z&apos; // true</span><br><span class="line">&apos;\u007A&apos; === &apos;z&apos; // true</span><br><span class="line">&apos;\u&#123;7A&#125;&apos; === &apos;z&apos; // true</span><br></pre></td></tr></table></figure></li><li><p>字符串的遍历器接口<br>字符串可以被 for…of 循环遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(let a of &apos;foo&apos;)&#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">// &apos;f&apos;</span><br><span class="line">// &apos;o&apos;</span><br><span class="line">// &apos;o&apos;</span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let a = `$&#123;b&#125;eee`;</span><br></pre></td></tr></table></figure><p> <strong><code>.trim()</code> 可以消除换行</strong></p><h4 id="4、正则"><a href="#4、正则" class="headerlink" title="4、正则"></a>4、正则</h4></li><li><p>1、RegExp 构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let regex = new RegExp(&apos;xyz&apos;,&apos;i&apos;)</span><br><span class="line">let regex = new RegExp(/xyz/,&apos;i&apos;)</span><br><span class="line">let regex = new RegExp(/xyz/i)</span><br><span class="line">let regex = new RegExp(/xyz/ig,&apos;i&apos;) // ig 会被第二个参数覆盖</span><br></pre></td></tr></table></figure></li><li><p>2、字符串的正则方法</p><ul><li>match</li><li>replace</li><li>search</li><li>split</li></ul></li><li><p>3、u 修饰符<br>Unicode模式 （汉字的时候注意）<br> <strong><code>/\,/u</code> //报错</strong></p></li><li><p>4、RegExp.prototype.unicode<br>是否设置了u修饰符；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const r1 = /hello/;</span><br><span class="line">const r2 = /hello/u;</span><br><span class="line"></span><br><span class="line">r1.unicode // false</span><br><span class="line">r2.unicode // true</span><br></pre></td></tr></table></figure></li><li><p>5、y 修饰符<br>“粘连”修饰符<br>y跟g一样，y修饰符确保匹配必须从第一位值开始<br>g会忽略非法字符，y不会</p></li><li><p>6、RegExp.prototype.sticky<br>是否这是了y修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let r = /hello/y;</span><br><span class="line">r.sticky // true</span><br></pre></td></tr></table></figure></li><li><p>7、RegExp.prototype.flags</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/abc/ig.source // 返回正则表达式正文 &apos;abc&apos;</span><br><span class="line">/abc/.ig.flags // 返回正则表达式修饰符 &apos;ig&apos;</span><br></pre></td></tr></table></figure></li><li><p>8、s 修饰符：dotAll 模式<br>正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个   例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个   是行终止符（line terminator character）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/foo.bar/.test(&apos;foo\nbar&apos;) // false</span><br><span class="line">/foo.bar/s.test(&apos;foo\nbar&apos;) // true</span><br></pre></td></tr></table></figure><p> <strong>这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const re = /foo.bar/s;</span><br><span class="line">re.test(&apos;foo\nbar&apos;) // true</span><br><span class="line">re.dotAll // true</span><br><span class="line">re.flags // &apos;s&apos;</span><br></pre></td></tr></table></figure></li><li><p>9、后行断言</p></li><li><p>10、Unicode 属性类</p></li><li><p>11、具名匹配<br>正则表达式使用圆括号进行组匹配<br>ES2018 引入类 具名匹配，允许每个组匹配质地ing一个名字，即便于阅读代码，又便于引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let re = /(?&lt;year&gt;\d&#123;4&#125;)=(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u;</span><br><span class="line">&apos;2015-01-02&apos;.replace(re,&apos;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&apos;) // &apos;02/01/2015&apos;</span><br></pre></td></tr></table></figure><p> <strong>replace 方法的第二个参数也可以是函数</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&apos;2015-01-02&apos;.replace(re,(</span><br><span class="line">    matched, // 整个匹配的结果 2015-01-02</span><br><span class="line">    capture1， // 第一个组匹配 2015</span><br><span class="line">    capture2，// 第二个组匹配 01</span><br><span class="line">    capture3， // 第三个组匹配 02</span><br><span class="line">    position， // 匹配开始的位置 0</span><br><span class="line">    s，// 原字符串</span><br><span class="line">    groups // 具名组构成的一个对象 &#123;year,month,day&#125;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">    let &#123;day,month,year&#125; = groups;</span><br><span class="line">    return `$&#123;day&#125;/$&#123;month/$&#123;year&#125;&#125;`</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>12、正则匹配索引<br>在exec（）方法的返回结果上加indices属性，在这个属性上面可以那道匹配开始位置和结束位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const text = &apos;zabbcdef&apos;;</span><br><span class="line">const re = /eb/;</span><br><span class="line">const result = re.exec(text);</span><br><span class="line"></span><br><span class="line">result.index // 1</span><br><span class="line">result.indices // [[1,3]]  每组开始结束的位置</span><br></pre></td></tr></table></figure></li><li><p>13、 String.prototype.matchAll()<br>ES2020 增加了 matchAll方法，可以一次性去除所有匹配。返回的是一个遍历器（Iterator），而不是数组。可以使用for…ofxunhuan取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const string = &apos;test1test2test3&apos;;</span><br><span class="line">const regex = /t(e)(st(\d?))/g;</span><br><span class="line"></span><br><span class="line">for( const match of string.matchAll(regex))&#123;</span><br><span class="line">    console.log(match)</span><br><span class="line">&#125;</span><br><span class="line">// [&apos;test1&apos;,&apos;e&apos;,&apos;st1&apos;,&apos;1&apos;,index:0,input:&apos;test1test2test3&apos;]</span><br><span class="line">// [&apos;test2&apos;,&apos;e&apos;,&apos;st2&apos;,&apos;1&apos;,index:5,input:&apos;test1test2test3&apos;]</span><br><span class="line">// [&apos;test3&apos;,&apos;e&apos;,&apos;st3&apos;,&apos;1&apos;,index:10,input:&apos;test1test2test3&apos;]</span><br></pre></td></tr></table></figure><ul><li>遍历器转为数组的方式非常简单，使用…运算符和Array.from（）方法就可以了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...string.matchAll(regex)]</span><br><span class="line">Array.from(string.matchAll(regex))</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="5、Number的方法和扩展"><a href="#5、Number的方法和扩展" class="headerlink" title="5、Number的方法和扩展"></a>5、Number的方法和扩展</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">toString</td><td align="left">把数字转换为字符串，使用指定的基数</td></tr><tr><td align="left">toLocaleString</td><td align="left">把数字转换为字符串，使用本地数字格式顺序</td></tr><tr><td align="left">toFixed</td><td align="left">把数字转换为字符串，结果的小数点后又自定位数的数字</td></tr><tr><td align="left">toExponential</td><td align="left">转换为指定的计数法（转为科学计数法 1.2   +2）参数-位数 1～20</td></tr><tr><td align="left">toPrecision</td><td align="left">把数字格式化为指定的长度（后面给加小数点）</td></tr><tr><td align="left">valueOf</td><td align="left">返回一个Number对象的基本数字值</td></tr></tbody></table><hr><ul><li><p>1、 二进制八进制表示法<br>二进制前缀<strong>0b(或0B)</strong><br>八进制前缀<strong>0o(或0O)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0b11110111 === 503 // true</span><br><span class="line">0o767 === 503 // true</span><br></pre></td></tr></table></figure></li><li><p><em>二进制和八进制转换十进制使用Number*</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number(&apos;0b111&apos;) // 7</span><br><span class="line">Number(&apos;0o10&apos;) // 8</span><br></pre></td></tr></table></figure></li><li><p>2、Number.isFinite(),Number.isNaN()<br><code>Number.isFinite()</code>用来检查数值是否为有限的（finite），即不是Infinity。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number.isFinite(15) // true</span><br><span class="line">Number.isFinite(0.8) // true</span><br><span class="line">Number.isFinite(NaN) // false</span><br><span class="line">Number.isFinite(Infinity) // false</span><br><span class="line">Number.isFinite(&apos;foo&apos;) // false 参数不是数值，一律返回false</span><br></pre></td></tr></table></figure><p><code>Number.isNaN()</code> 用来检查一个值是否为NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Number.isNaN(NaN) // true</span><br><span class="line">Number.isNaN(15) // false</span><br><span class="line">Number.isNaN(&apos;15&apos;) // false 参数类型不是NaN 一律返回false   </span><br><span class="line">``` </span><br><span class="line">* 3、Number.parseInt()、Number.paresFloat()</span><br><span class="line">Es6将全局方法parseInt和paresFloat，移植到Number对象上面，行为完全保持不变</span><br><span class="line">* 4、Number.isInteger()</span><br><span class="line">`Number.isInteger()` 用来判断一个数值是否为整数</span><br></pre></td></tr></table></figure><p>Number.isInteger(25) // true<br>Number.isInteger(25.1) // false<br>Number.isInteger(25.0) // true<br>Number.isInteger(‘15’) // false 参数不是数值 返回false<br>Number.isInteger(25.0) // true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 5、number.EPSILON</span><br><span class="line">es6在Number对象上面，新增一个极小的常量Number.EPSILON。根据规定它表示1与大于1的最小浮点数之间的差。</span><br><span class="line">* 6、安全整数和Number.isSafeInteger()</span><br><span class="line">javaScript能够准确表示整数范围在-2^53到2^53之间（不含两个端点）， 超过这个范围，无法精确表示这个值。</span><br><span class="line">`Number.isSafeInteger()`则是用来判断一个整数是否落在这个范围之内</span><br><span class="line">* 7、Math对象的扩展</span><br><span class="line">* 8、指数运算符</span><br><span class="line">ES2016 新增落一个指数运算符（**）。</span><br></pre></td></tr></table></figure><p>2 ** 2 // 4<br>2 ** 3 // 8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个运算符的一个特点是右结右，多个指数运算符连用时，是从最右边开始计算的</span><br></pre></td></tr></table></figure><p>// 相当于 2 ** （3 ** 2）<br>2 ** 3 ** 2<br>// 512</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指数运算符可以与等号结合，形成一个新的运算符（**=）</span><br></pre></td></tr></table></figure><p>let a = 1.5<br>a *<em>= 2<br>// 等同于 a = a * a;<br>let b = 4;<br>b *</em>= 3;<br>// 等同于 b = b * b * b;<br>```</p></li><li><p>10、BigInt对象</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;h4 id=&quot;1、let-amp-const-amp-顶层对象&quot;&gt;&lt;a href=&quot;#1、let-amp-const-amp-
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="web" scheme="http:/dongxin03.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>html5 到底新增了什么</title>
    <link href="http://dongxin03.github.io/2020/08/16/html5%E5%88%B0%E5%BA%95%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://dongxin03.github.io/2020/08/16/html5%E5%88%B0%E5%BA%95%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2020-08-16T02:52:04.000Z</published>
    <updated>2020-08-18T12:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="html5-到底新增了什么"><a href="#html5-到底新增了什么" class="headerlink" title="html5 到底新增了什么"></a>html5 到底新增了什么</h2><h3 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h3><ul><li><code>&lt;template&gt;</code> 通过javascript在运行时实例化内容的容器</li><li><code>&lt;section&gt;</code> 定义文档中的一个章节</li><li><code>&lt;nav&gt;</code> 定义只包含导航连接的章节</li><li><code>&lt;article&gt;</code> 定义可以独立余内容其余部分的完整独立内容块</li><li><code>&lt;aside&gt;</code> 定义和页面内容关联较低的内容——如果被删除，剩下的内容仍然很合理</li><li><code>&lt;header&gt;</code> 定义页面或章节的头部。它经常包含logo、页面标题和导航性的目录</li><li><code>&lt;footer&gt;</code> 定义页面或章节尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。</li><li><code>&lt;main&gt;</code> 定义文档中主要或重要的内容</li></ul><hr><ul><li><code>&lt;figure&gt;</code> 代表一个和文档有关的图例</li><li><code>&lt;figcaption&gt;</code> 代表一个图例的说明</li></ul><hr><ul><li><code>&lt;time&gt;</code> 代表日期和时间值；机器可读的等价形式通过datetime属性指定</li><li><code>&lt;mark&gt;</code> 代表一段需要被高亮引用文字</li></ul><hr><ul><li><code>&lt;ruby&gt;</code> 代表被ruby注释标记的文本，如中文汉子和它的拼音</li><li><code>&lt;rt&gt;</code> 代表ruby注释，如中文拼音</li><li><code>&lt;rp&gt;</code> 代表ruby注释两边的额外插入文本，用于不支持ruby注释显示的浏览器中提供友好的注释显示</li><li><code>&lt;bdi&gt;</code> 代表需要脱离父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本</li><li><code>&lt;wbr&gt;</code> 代表（建议）换行，当文本太长需要换行时将会在此处添加换行符号</li></ul><hr><ul><li><code>&lt;embed&gt;</code> 代表一个嵌入的外部资源，如应用程序或交互内容</li><li><code>&lt;video&gt;</code> 代表一段视频及其视频文件和字幕，并提供了播放视频的用户界面</li><li><code>&lt;audio&gt;</code> 代表一段声音，或音频流</li><li><code>&lt;source&gt;</code> 为 video 或 audio 这类媒体元素指定媒体源</li><li><code>&lt;track&gt;</code> 为 video 或 audio 这类媒体元素指定文本轨道（字幕）</li><li><code>&lt;canvas&gt;</code> 代表位图区域，可以通过脚本在它上面呈现图形，如图表，游戏绘图等</li><li><code>&lt;svg&gt;</code> 定义一个嵌入式矢量图</li><li><code>&lt;math&gt;</code> 定义一段数学公式</li></ul><hr><ul><li><code>&lt;datalist&gt;</code> 代表提供给其他控件的一组预定义选项</li><li><code>&lt;keygen&gt;</code> 代表一个密钥对生成器控件</li><li><code>&lt;output&gt;</code> 代表计算值</li><li><code>&lt;progress&gt;</code> 代表进度条</li><li><code>&lt;meter&gt;</code> 代表滑动条</li></ul><hr><ul><li><code>&lt;details&gt;</code> 代表一个用户可以（点击）获取额外信息或控件的小部件</li><li><code>&lt;summary&gt;</code> 代表 details 元素的综述 或标题</li><li><code>&lt;menuitem&gt;</code> 代表一个用户可以点击的菜单项</li><li><code>&lt;menu&gt;</code> 代表菜单</li></ul><hr><h3 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h3><ul><li><code>web sockets</code> 允许在页面和服务器之间建立持久连接并通过这种方法来交换非html数据（全双工通道，可以双向通讯）</li></ul><hr><ul><li><code>server-sent events</code> 简称sse，允许服务器向客户端推送事件，而不是仅在响应客户端请求时服务器才能发送数据的传统范式（单向通道，只能服务器向浏览器发送）<ol><li>sse 使用http协议，现有的服务器软件都支持。webSocket是一个独立协议</li><li>sse属于轻量级，使用简单，webSocket 协议相对复杂</li><li>sse默认支持断线重连，webSocket需要自己实现</li><li>sse一般只用来传送文本，二进制数据需要编码后传送，webSocket默认支持传送二进制数据</li><li>支持自定义发送的消息类型</li></ol></li></ul><hr><ul><li><code>webRTC</code> 这项技术，其中的RTC代表的是即时通信，允许连接到其他人，直接在浏览器中控制视频会议，而不需要一个插件或是外部的应用程序</li></ul><hr><h3 id="离线-amp-存储"><a href="#离线-amp-存储" class="headerlink" title="离线 &amp; 存储"></a>离线 &amp; 存储</h3><ul><li><code>离线资源：应用程序缓存</code> （火狐）全面支持html5离线资源规范。其他大多数针对离线资源仅提供了某种程度上的支持</li><li><code>在线和离线事件</code> firefox3 支持WHATWG在线和离线事件，这可以让应用程序和扩展检测到是否存在可用的网络连接，以及在连接建立和断开时能感知到</li><li><code>WHATWG 客户端会话和持久化存储（又名DOM存储）</code> 客户端会话和持久化存储让web应用程序能够在客户端存储结构化数据</li><li><code>indexedDB</code> 是一个为了能够在浏览器中存储大量结构化数据，并且能够在这些数据上使用索引进行高性能检索的web标准</li><li><code>web应用程序中使用文件</code> 对新的html5文件Api的支持已经被添加到Gecko中，从而使web应用程序可以访问用户选择的本地文件。这包括 type file 的input元素的新的multiple 属性针对多文件的选择支持。还有fileReader</li></ul><hr><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><ul><li><code>使用html5 音视频</code> audio 和video 元素嵌入并支持新的多媒体操作</li><li><code>使用camera API</code> 允许使用，操作计算机摄像头，并从中存储图像</li><li><code>Track 和 WebVTT</code> <code>track</code> 元素支持字幕和章节。webVTT一个文本轨迹格式</li></ul><hr><h3 id="3D，图像-amp-效果"><a href="#3D，图像-amp-效果" class="headerlink" title="3D，图像 &amp; 效果"></a>3D，图像 &amp; 效果</h3><ul><li><code>canvas</code></li><li><code>WebGL</code> WebGL通过引入了一套非常符合OpenGL ES2.0并且可以用在HTML5<code>&lt;canvas&gt;</code>元素中的api给Web带来了3D图像功能</li><li><code>svg</code> 一个基于XML的可以直接嵌入到html中的矢量图格式</li></ul><hr><h3 id="性能-amp-集成"><a href="#性能-amp-集成" class="headerlink" title="性能 &amp; 集成"></a>性能 &amp; 集成</h3><ul><li><code>Web Workers</code> 能够把javaScript计算委托给后台线程，通过允许这些活动以防止使用交互型事件变得缓慢</li><li><code>XMLHttpRequest Level2</code> 允许异步读取页面的某些部分，允许其显示动态内容，根据时间和用户行为而有所不同。这就是在Ajax背后的技术</li><li><code>即时编译javaScript引擎</code> 新一代的javaScript 引擎功能更强大，性能更杰出</li><li><code>History API</code> 允许对浏览器历史记录进行操作。这对那些交互的加载新信息的页面尤其有用</li><li><code>contentEditable属性：把你的网站变成wiki（多人协作的写作系统）</code> html5 已经把contentEditable属性标准化了。</li><li><code>拖放</code> html5的拖放API能够支持网站内部和网站之间的拖放项目。同时也提供了一个更简单的供扩展和基于Mozilla （制作火狐的基金会）的应用程序使用的API</li><li><code>html中的焦点管理</code> 支持新的html5 activeElement和hasFocus属性。</li><li><code>基于Web的协议处理程序</code> 你现在可以使用<code>navigator.registerProtocolHandler()</code> 方法把web应用程序注册成一个协议处理程序</li><li><code>requestAnimationFrame</code> 允许控制动画渲染以获得更优性能</li><li><code>全屏API</code> 为一个网页或者应用程序控制使用整个屏幕，而不是显示浏览器界面</li><li><code>指针锁定API</code> 允许锁定到内容的指针，这样游戏或者类似应用程序在指针到达窗口限制时也不会失去焦点</li><li><code>在线和离线事件</code> 为了构建一个良好的具有离线功能的web应用程序，你需要知道什么时候你的应用程序确实离线了。顺便提一句，在你的应用程序又再回到在线状态时你也需要知道。</li></ul><hr><h3 id="设备访问"><a href="#设备访问" class="headerlink" title="设备访问"></a>设备访问</h3><ul><li><code>使用Camera API</code> 允许使用和操作计算机的摄像头，并从中存取照片</li><li><code>触控事件</code> 对用户按下触控屏幕的事件做出反应的处理程序</li><li><code>使用地理位置定位</code> 让浏览器使用地理位置服务定位用户的位置</li><li><code>检测设备方向</code> 让用户在运行浏览器的设备变更方向时能够得到信息。这可以被用作一种输入设备（例如制作能够对设备位置做出反应的游戏）或者使用页面的布局跟屏幕的方向相适应（横向或纵向）<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3></li><li><code>新的背景样式特性</code> 现在可以使用 <strong>box-shadow</strong>给逻辑框设置一个阴影，而且还可以设置 多背景。</li><li><code>更精美的边框</code> 现在不仅可以使用图像来格式化边框，使用<strong>border-image</strong>和它关联的普通属性，而且可以通过<strong>border-radius</strong>属性来支持援交边框</li><li><code>为你的样式设置动画</code> 使用css Transitions 以在不同状态间设置动画，或者使用css Animations在页面的某些部分设置动画而不需要一个触发事件，你现在可以在页面中控制移动元素来。</li><li><code>排版方面的改进</code> 作者们如今又更强大的能力使自己的页面文字达到更佳的排版。他们不但可以控制<strong>text-overflow</strong>和<strong>hyphenation</strong>，还可以给它设置一个阴影或者更精细的控制它的<strong>decorations</strong>。感谢新的<strong>@font-face</strong>规则，现在我们可以下载并应用自定义的字体了</li><li><code>新的展示性布局</code> 为了提高设计的灵活性，已经有两种新的布局被添加进来： css多栏布局，以及css 灵活方框布局</li></ul><hr><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noopener">抄录-MDN</a></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;html5-到底新增了什么&quot;&gt;&lt;a href=&quot;#html5-到底新增了什么&quot; class=&quot;headerlink&quot; title=&quot;html5 到底新增了什么&quot;&gt;&lt;/a&gt;html5 到底新增了什么&lt;/h2&gt;&lt;h3 id=&quot;新增标签&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="html5" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/html5/"/>
    
    
      <category term="web" scheme="http:/dongxin03.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>焦灼的滚动条</title>
    <link href="http://dongxin03.github.io/2020/04/08/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%95%B4%E7%90%86/"/>
    <id>http://dongxin03.github.io/2020/04/08/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%95%B4%E7%90%86/</id>
    <published>2020-04-08T03:29:04.000Z</published>
    <updated>2020-05-08T05:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="让人焦灼的滚动条"><a href="#让人焦灼的滚动条" class="headerlink" title="让人焦灼的滚动条"></a>让人焦灼的滚动条</h2><ul><li>还没写</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;让人焦灼的滚动条&quot;&gt;&lt;a href=&quot;#让人焦灼的滚动条&quot; class=&quot;headerlink&quot; title=&quot;让人焦灼的滚动条&quot;&gt;&lt;/a&gt;让人焦灼的滚动条&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;还没写&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="web" scheme="http:/dongxin03.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>(Web)vue+声网-实现视频通话及调试</title>
    <link href="http://dongxin03.github.io/2019/12/26/%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E5%8F%8A%E8%B0%83%E8%AF%95/"/>
    <id>http://dongxin03.github.io/2019/12/26/%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E5%8F%8A%E8%B0%83%E8%AF%95/</id>
    <published>2019-12-26T01:33:26.000Z</published>
    <updated>2019-12-26T02:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>都是官方文档，仅供我自己巩固</strong></p><h2 id="1、准出"><a href="#1、准出" class="headerlink" title="1、准出"></a>1、准出</h2><ul><li>有个项目 vue(别的项目也行 react啥的)</li><li>注册声网，在控制台创建个应用获取 <strong>appID</strong>(必须)</li></ul><h2 id="2、开始创建"><a href="#2、开始创建" class="headerlink" title="2、开始创建"></a>2、开始创建</h2><ul><li>这段代码是视频的时候，会将视频插入的dom，可以把这段dom放到你要视频的页面中；</li><li>videoIdList 这个变量是我自己定义的，主要是存放远端视频（别人的视频）的id</li><li>local_stream 这个元素id是我要插入本地视频的地方，也可以叫别的名字；（下面会讲）</li><li>remote_video_ + 远端视频id ，这个元素id是我要插入远端视频的地方，也可以叫别的名字；（下面会讲）</li><li><em>注意 这两个最好包在一个id为video的元素下  不然总会插入到别的地方 （我也不会调  哈哈哈哈）*</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;video&apos; :style=&quot;&#123;height:&apos;100%&apos;,width:&apos;100%&apos;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;video-view review-right-video&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;local_stream&quot; :style=&quot;&#123;height:&apos;100%&apos;,width:&apos;100%&apos;&#125;&quot;&gt;&lt;/div&gt; // 本地的视频会插入到这个ID下</span><br><span class="line">        &lt;div id=&quot;local_video_info&quot; class=&quot;video-profile hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;video_autoplay_local&quot; class=&quot;autoplay-fallback hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">        v-for=&quot;item in videoIdList&quot; :key=&quot;item&quot; </span><br><span class="line">        :id=&quot;`remote_video_panel_`+item&quot;  // 远端的视频会插入到这个id 下  </span><br><span class="line">        :class=&quot;[&apos;video-view review-center-video&apos;,imageUrl ? &apos;active&apos; : &apos;&apos;]&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;div </span><br><span class="line">            :style=&quot;&#123;height:&apos;100%&apos;,width:&apos;100%&apos;&#125;&quot; </span><br><span class="line">            :id=&quot;`remote_video_`+item&quot; </span><br><span class="line">        &gt;&lt;/div&gt;</span><br><span class="line">        &lt;div :id=&quot;`remote_video_info_`+item&quot; class=&quot;video-profile hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div :id=&quot;`video_autoplay_`+item&quot; class=&quot;autoplay-fallback hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="3、对接声网"><a href="#3、对接声网" class="headerlink" title="3、对接声网"></a>3、对接声网</h2><ul><li><p><strong>安装</strong></p></li><li><p><code>npm install agora-rtc-sdk</code> ;</p></li><li><p>也可以使用CDN</p></li><li><p>CDN <code>&lt;script src=&quot;https://cdn.agora.io/sdk/release/AgoraRTCSDK-3.0.0.js&quot;&gt;&lt;/script&gt;</code>;</p></li><li><p><strong>引入</strong></p></li><li><p><code>import AgoraRTC from &#39;agora-rtc-sdk&#39;</code>;</p></li></ul><h2 id="4、整个声网的文件"><a href="#4、整个声网的文件" class="headerlink" title="4、整个声网的文件"></a>4、整个声网的文件</h2><p>*<br>*<br>*</p><ul><li><strong>完整的代码在最下面，直接看代码就行</strong></li><li></li><li></li><li></li><li>我建了一个文件 叫 agoraRTCfunct（都是网易翻译来的）</li></ul><p>1.引入 sdk<br><code>import AgoraRTC from &#39;agora-rtc-sdk&#39;</code>;<br>2.设置两个参数变量<br><strong>主要的就是appID</strong><br><strong>频道是自己定义的，就像设置一个房间，别人会根据你的频道号加入到你的视频当中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const rtc = &#123;</span><br><span class="line">    client: null,</span><br><span class="line">    joined: false, //是否已经加入频道</span><br><span class="line">    published: false, // 是否已经发布</span><br><span class="line">    localStream: null,</span><br><span class="line">    remoteStreams: [],</span><br><span class="line">    params: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const  option = &#123;</span><br><span class="line">    appID: &quot;f3e69727bee94580be65eb6193a72b89&quot;,</span><br><span class="line">    channel: &quot;123&quot;, // 频道</span><br><span class="line">    uid: 1123, // 用户id</span><br><span class="line">    token: &quot;&quot; // 手机app上用的  没用</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>3.开始声网</p><ul><li>开始监听的代码在下面 ， 监听视频过程中的很多事件</li><li>创建本地流的代码也在下面<ul><li>主要是创建了一个频道，</li><li>初始化一个频道</li><li>加入到这个频道</li></ul></li><li><em>在页面中引入 import agora from ‘./agoraRTCfunct.js’; 创建的这个文件*</em></li><li><em>thet是vue页面的this,我在页面初始化（mounted）的时候调用了 agora.agoraFunction(this); 传入了this*</em></li><li>因为有用户加入的时候会用到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const agoraFunction = function(thet)&#123;</span><br><span class="line">    if(rtc.joined)&#123;</span><br><span class="line">        Notification.info(&quot;您已经加入频道&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 创建客户端</span><br><span class="line">    rtc.client = AgoraRTC.createClient(&#123;mode: &quot;live&quot;, codec: &quot;vp8&quot;&#125;);</span><br><span class="line">    rtc.params = &#123;mode:&apos;live&apos;, codec: &apos;vp8&apos;&#125;; // 赋值输入框的值</span><br><span class="line">    Listening(thet);                  // 开始监听</span><br><span class="line">    // 初始化</span><br><span class="line">    rtc.client.init(option.appID, function () &#123;</span><br><span class="line">        console.log(&quot;初始化成功&quot;);</span><br><span class="line">        //加入频道</span><br><span class="line">        rtc.client.join(option.token ? option.token : null, option.channel, option.uid ? +option.uid : null, function (uid) &#123;</span><br><span class="line">            console.log(&quot;成功----频道号码: &quot; + option.channel + &quot;你的id: &quot; + uid);</span><br><span class="line">            rtc.joined = true;</span><br><span class="line">            rtc.params.uid = uid;   // 获取到自己的id</span><br><span class="line">            createStream();           // 创建本地流</span><br><span class="line">        &#125;, function(err) &#123;</span><br><span class="line">            console.error(&quot;加入频道失败&quot;, err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>4.创建本地流（就是打开摄像头能看到自己）<br><strong>重要的是</strong></p><ul><li>rtc.localStream.play(‘local_stream’); // 插入到这个id中</li><li>local_stream 这个是我自己定义的ID  本地的视频会插入到这个元素中</li><li>发布本地流是把，本地的视频推到远端 、要不别人看不见<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const createStream = function()&#123; //创建本地流</span><br><span class="line">     // 创建本地流</span><br><span class="line">     rtc.localStream = AgoraRTC.createStream(&#123;</span><br><span class="line">        streamID: rtc.params.uid, // 在上一步获取到的自己的视频id</span><br><span class="line">        audio: true,</span><br><span class="line">        video: true,</span><br><span class="line">        screen: false, // 是不是需要共享屏幕   这个只在谷歌浏览器有用   不咋好使</span><br><span class="line">    &#125;);</span><br><span class="line">    // 初始化本地流</span><br><span class="line">    rtc.localStream.setVideoProfile(&quot;360p_1&quot;); //  640X360  15  400 视频清晰度</span><br><span class="line">    rtc.localStream.init(function () &#123;</span><br><span class="line">        console.log(&quot;本地流-初始化-成功&quot;,rtc.localStream);</span><br><span class="line">        // 发布本地流</span><br><span class="line">        rtc.localStream.play(&apos;local_stream&apos;); // 插入到这个id中</span><br><span class="line">        publish(); // 发布本地流</span><br><span class="line">    &#125;, function (err) &#123;</span><br><span class="line">        console.error(&quot;本地流-初始化-失败&quot;, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>发布根底流*</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const publish =  function () &#123; // 发布本地流</span><br><span class="line">    if (!rtc.client) &#123;</span><br><span class="line">      Notification.info(&quot;您还没加入频道&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (rtc.published) &#123;</span><br><span class="line">        Notification.info(&quot;您已经发布频道&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const oldState = rtc.published;</span><br><span class="line"></span><br><span class="line">    // publish localStream</span><br><span class="line">    rtc.client.publish(rtc.localStream, function (err) &#123;</span><br><span class="line">      rtc.published = oldState;</span><br><span class="line">      console.log(&quot;publish failed&quot;);</span><br><span class="line">      Toast.error(&quot;publish failed&quot;)</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">    Notification.success(&quot;发布频道成功&quot;);</span><br><span class="line">    rtc.published = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5.监听视频过程中的事件</p><ul><li>重要的是有别人加入你的视频中的事件（和离开）</li><li><em>主要是有用户加入频道的时候，要及时创建一个指定的对方id的元素*</em></li><li>remoteStream.play(“remote_video_” + id); // 插入到 id为 remote_video_ + id 元素中</li><li>“remote_video_” + id  这个就是我定义的元素， 对方的视频会插入到这里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">const Listening = function(thet)&#123; // 订阅事件</span><br><span class="line">    // ---- 订阅开始</span><br><span class="line">    rtc.client.on(&quot;error&quot;, (err) =&gt; &#123;</span><br><span class="line">        console.log(&quot;===&gt;&quot;,err)</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;peer-leave&quot;, function(evt) &#123; // 有用户离开时</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        var reason = evt.reason; // 离线原因 Quit -- 主动离开  ServerTimeOut -- 超时掉线（也有可能是主动离开）</span><br><span class="line">        if (uid != rtc.params.uid) &#123;</span><br><span class="line">            thet.deleteView(uid);</span><br><span class="line">        &#125;;</span><br><span class="line">        Notification.info(&quot;用户离开&quot;);</span><br><span class="line">        console.log(&quot;用户离线&quot; , uid, &quot;reason: &quot;, reason);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-published&quot;, function(evt)&#123; // 发布视频流本地触发</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        thet.myId = id;</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-added&quot;, function (evt) &#123;   //有远程流加入时</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        if (id !== rtc.params.uid) &#123;</span><br><span class="line">            rtc.client.subscribe(remoteStream, function (err) &#123; // 订阅加入的远程端视频</span><br><span class="line">                console.log(&quot;订阅远程端视频失败&quot;, err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        console.log(&apos;加入的远程端视频流: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-subscribed&quot;, function (evt) &#123; //订阅远程流</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        rtc.remoteStreams.push(remoteStream); // 不知道干啥的</span><br><span class="line">        Notification.success(&quot;用户加入&quot;+id);</span><br><span class="line">        thet.addView(id);</span><br><span class="line">        setTimeout(()=&gt;&#123; // vue创建元素 是异步的   （一会处理）</span><br><span class="line">            remoteStream.play(&quot;remote_video_&quot; + id); // 插入到 id为 remote_video_ + id 元素中</span><br><span class="line">        &#125;,300);</span><br><span class="line">        console.log(&apos;接收到的远程端视频: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-removed&quot;, function (evt) &#123; // 对方取消发布</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        remoteStream.stop(&quot;remote_video_&quot; + id);</span><br><span class="line">        rtc.remoteStreams = rtc.remoteStreams.filter(function (stream) &#123;</span><br><span class="line">          return stream.getId() !== id;</span><br><span class="line">        &#125;)</span><br><span class="line">        thet.deleteView(id);</span><br><span class="line">        console.log(&apos;stream-removed remote-uid: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;onTokenPrivilegeWillExpire&quot;, function()&#123; // token过期前30秒调用</span><br><span class="line">        // client.renewToken(token);</span><br><span class="line">        console.log(&quot;token即将过期&quot;)</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;onTokenPrivilegeDidExpire&quot;, function()&#123; // token已经失效</span><br><span class="line">        // client.renewToken(token);</span><br><span class="line">        console.log(&quot;token已经失效&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;network-quality&quot;, function(stats) &#123; // 本地用户的网络质量</span><br><span class="line">        console.log(&quot;下行&quot;, callQuality[stats.downlinkNetworkQuality]);</span><br><span class="line">        console.log(&quot;上行&quot;, callQuality[stats.uplinkNetworkQuality]);</span><br><span class="line">    &#125;); </span><br><span class="line">    rtc.client.on(&quot;mute-audio&quot;, function(evt) &#123; // 对方关闭了语音</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;已静音&quot;);</span><br><span class="line">        console.log(&quot;mute audio:&quot; + uid);</span><br><span class="line">        //alert(&quot;mute audio:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;unmute-audio&quot;, function (evt) &#123; // 对方打开了语音</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;打来了语音&quot;);</span><br><span class="line">        console.log(&quot;unmute audio:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;mute-video&quot;, function (evt) &#123; // 对方关闭摄像头</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;关闭了摄像头&quot;);</span><br><span class="line">        console.log(&quot;mute video&quot; + uid);</span><br><span class="line">        //alert(&quot;mute video:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;unmute-video&quot;, function (evt) &#123; // 对方打开了摄像头</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;打开了了摄像头&quot;);</span><br><span class="line">        console.log(&quot;unmute video:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    // ---- 订阅结束</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>我在监听到有用户加入的时候，把用户的id插入到一个数组里，循环渲染出了有特定id的元素（thet.addView(id);）</li><li>我在监听到有用户离开的时候，把用户的id从这个数组中去除掉，在循环渲染出了有特定id的元素（thet.deleteView(id);）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">addView(id)&#123;</span><br><span class="line">    if(id == this.myId || this.videoIdList.indexOf(id) != -1) return;</span><br><span class="line">    const list = this.videoIdList;</span><br><span class="line">    list.push(id);</span><br><span class="line">    this.videoIdList = list;</span><br><span class="line">&#125;,</span><br><span class="line">deleteView(id)&#123;</span><br><span class="line">    const index = this.videoIdList.indexOf(id);</span><br><span class="line">    const list = this.videoIdList;</span><br><span class="line">    list.splice(index,1);</span><br><span class="line">    this.videoIdList = list;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p><strong>其他的就没有比较重要的了</strong></p><ul><li>导出了这几个方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    rtc, // 参数</span><br><span class="line">    option, // 参数</span><br><span class="line">    agoraFunction, // 声网开始的方法  创建  初始化 加入频道 </span><br><span class="line">    publish, // 发布本地流</span><br><span class="line">    unpublish, // 停止发布本地流</span><br><span class="line">    leave, // 离开频道</span><br><span class="line">    getDevices, // 获取可用的 摄像头 麦克风</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><em>完整的代码*</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line">import AgoraRTC from &apos;agora-rtc-sdk&apos;;</span><br><span class="line">import &#123;Notification&#125; from &apos;element-ui&apos;;</span><br><span class="line"></span><br><span class="line">const callQuality = &#123; // 通话质量</span><br><span class="line">    0:&quot;质量未知&quot;,</span><br><span class="line">    1:&quot;质量极好&quot;,</span><br><span class="line">    2:&quot;用户主观感觉和极好差不多，但码率可能略低于极好&quot;,</span><br><span class="line">    3:&quot;用户主观感受有瑕疵但不影响沟通&quot;,</span><br><span class="line">    4:&quot;勉强能沟通但不顺畅&quot;,</span><br><span class="line">    5:&quot;网络质量非常差，基本不能沟通&quot;,</span><br><span class="line">    6:&quot;网络连接断开，完全无法沟通&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rtc = &#123;</span><br><span class="line">    client: null,</span><br><span class="line">    joined: false, //是否已经加入频道</span><br><span class="line">    published: false, // 是否已经发布</span><br><span class="line">    localStream: null,</span><br><span class="line">    remoteStreams: [],</span><br><span class="line">    params: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const  option = &#123;</span><br><span class="line">    appID: &quot;f3e69727bee94580be65eb6193a72b89&quot;,</span><br><span class="line">    channel: &quot;123&quot;, // 频道</span><br><span class="line">    uid: 1123, // 用户id</span><br><span class="line">    token: &quot;&quot; // 手机app上用的  没用</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const leave = function () &#123; // 离开频道 </span><br><span class="line">    if (!rtc.client) &#123;</span><br><span class="line">        Notification.info(&quot;您还没加入频道&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!rtc.joined) &#123;</span><br><span class="line">        Notification.info(&quot;您还没加入频道(2)&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    rtc.client.leave(function () &#123;</span><br><span class="line">        rtc.localStream.stop();</span><br><span class="line">        rtc.localStream.close();</span><br><span class="line">        while (rtc.remoteStreams.length &gt; 0) &#123;</span><br><span class="line">            var stream = rtc.remoteStreams.shift();</span><br><span class="line">            var id = stream.getId();</span><br><span class="line">            stream.stop();</span><br><span class="line">            removeView(id);</span><br><span class="line">        &#125;</span><br><span class="line">        rtc.localStream = null;</span><br><span class="line">        rtc.remoteStreams = [];</span><br><span class="line">        rtc.client = null;</span><br><span class="line">        rtc.published = false;</span><br><span class="line">        rtc.joined = false;</span><br><span class="line">        Notification.info(&quot;离开频道成功&quot;);</span><br><span class="line">    &#125;, function (err) &#123;</span><br><span class="line">        Notification.error(&quot;离开频道失败&quot;);</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function unpublish (rtc) &#123; // 取消发布本地流</span><br><span class="line">    if (!rtc.client) &#123;</span><br><span class="line">        Notification.info(&quot;您还没加入频道&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!rtc.published) &#123;</span><br><span class="line">        Toast.error(&quot;您已经发布频道&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var oldState = rtc.published;</span><br><span class="line">    rtc.client.unpublish(rtc.localStream, function (err) &#123;</span><br><span class="line">      rtc.published = oldState;</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">    Notification.info(&quot;取消发布成功&quot;);</span><br><span class="line">    rtc.published = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const createStream = function()&#123; //创建本地流</span><br><span class="line">     // 创建本地流</span><br><span class="line">     rtc.localStream = AgoraRTC.createStream(&#123;</span><br><span class="line">        streamID: rtc.params.uid,</span><br><span class="line">        audio: true,</span><br><span class="line">        video: true,</span><br><span class="line">        screen: false,</span><br><span class="line">    &#125;);</span><br><span class="line">    // 初始化本地流</span><br><span class="line">    rtc.localStream.setVideoProfile(&quot;360p_1&quot;); //  640X360  15  400</span><br><span class="line">    rtc.localStream.init(function () &#123;</span><br><span class="line">        console.log(&quot;本地流-初始化-成功&quot;,rtc.localStream);</span><br><span class="line">        // 发布本地流</span><br><span class="line">        rtc.localStream.play(&apos;local_stream&apos;); // 插入到这个id中</span><br><span class="line">        publish(); // 发布本地流</span><br><span class="line">    &#125;, function (err) &#123;</span><br><span class="line">        console.error(&quot;本地流-初始化-失败&quot;, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const publish =  function () &#123; // 发布本地流</span><br><span class="line">    if (!rtc.client) &#123;</span><br><span class="line">      Notification.info(&quot;您还没加入频道&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (rtc.published) &#123;</span><br><span class="line">        Notification.info(&quot;您已经发布频道&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const oldState = rtc.published;</span><br><span class="line"></span><br><span class="line">    // publish localStream</span><br><span class="line">    rtc.client.publish(rtc.localStream, function (err) &#123;</span><br><span class="line">      rtc.published = oldState;</span><br><span class="line">      console.log(&quot;publish failed&quot;);</span><br><span class="line">      Toast.error(&quot;publish failed&quot;)</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">    Notification.success(&quot;发布频道成功&quot;);</span><br><span class="line">    rtc.published = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Listening = function(thet)&#123; // 订阅事件</span><br><span class="line">    // ---- 订阅开始</span><br><span class="line">    rtc.client.on(&quot;error&quot;, (err) =&gt; &#123;</span><br><span class="line">        console.log(&quot;===&gt;&quot;,err)</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;peer-leave&quot;, function(evt) &#123; // 有用户离开时</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        var reason = evt.reason; // 离线原因 Quit -- 主动离开  ServerTimeOut -- 超时掉线（也有可能是主动离开）</span><br><span class="line">        if (uid != rtc.params.uid) &#123;</span><br><span class="line">            thet.deleteView(uid);</span><br><span class="line">        &#125;;</span><br><span class="line">        Notification.info(&quot;用户离开&quot;);</span><br><span class="line">        console.log(&quot;用户离线&quot; , uid, &quot;reason: &quot;, reason);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-published&quot;, function(evt)&#123; // 发布视频流本地触发</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        thet.myId = id;</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-added&quot;, function (evt) &#123;   //有远程流加入时</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        if (id !== rtc.params.uid) &#123;</span><br><span class="line">            rtc.client.subscribe(remoteStream, function (err) &#123; // 订阅加入的远程端视频</span><br><span class="line">                console.log(&quot;订阅远程端视频失败&quot;, err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        console.log(&apos;加入的远程端视频流: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-subscribed&quot;, function (evt) &#123; //订阅远程流</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        rtc.remoteStreams.push(remoteStream); // 不知道干啥的</span><br><span class="line">        Notification.success(&quot;用户加入&quot;+id);</span><br><span class="line">        thet.addView(id);</span><br><span class="line">        setTimeout(()=&gt;&#123; // vue创建元素 是异步的   （一会处理）</span><br><span class="line">            remoteStream.play(&quot;remote_video_&quot; + id); // 插入到 id为 remote_video_ + id 元素中</span><br><span class="line">        &#125;,300);</span><br><span class="line">        console.log(&apos;接收到的远程端视频: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;stream-removed&quot;, function (evt) &#123; // 对方取消发布</span><br><span class="line">        var remoteStream = evt.stream;</span><br><span class="line">        var id = remoteStream.getId();</span><br><span class="line">        remoteStream.stop(&quot;remote_video_&quot; + id);</span><br><span class="line">        rtc.remoteStreams = rtc.remoteStreams.filter(function (stream) &#123;</span><br><span class="line">          return stream.getId() !== id;</span><br><span class="line">        &#125;)</span><br><span class="line">        thet.deleteView(id);</span><br><span class="line">        console.log(&apos;stream-removed remote-uid: &apos;, id);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;onTokenPrivilegeWillExpire&quot;, function()&#123; // token过期前30秒调用</span><br><span class="line">        // client.renewToken(token);</span><br><span class="line">        console.log(&quot;token即将过期&quot;)</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;onTokenPrivilegeDidExpire&quot;, function()&#123; // token已经失效</span><br><span class="line">        // client.renewToken(token);</span><br><span class="line">        console.log(&quot;token已经失效&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;network-quality&quot;, function(stats) &#123; // 本地用户的网络质量</span><br><span class="line">        console.log(&quot;下行&quot;, callQuality[stats.downlinkNetworkQuality]);</span><br><span class="line">        console.log(&quot;上行&quot;, callQuality[stats.uplinkNetworkQuality]);</span><br><span class="line">    &#125;); </span><br><span class="line">    rtc.client.on(&quot;mute-audio&quot;, function(evt) &#123; // 对方关闭了语音</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;已静音&quot;);</span><br><span class="line">        console.log(&quot;mute audio:&quot; + uid);</span><br><span class="line">        //alert(&quot;mute audio:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;unmute-audio&quot;, function (evt) &#123; // 对方打开了语音</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;打来了语音&quot;);</span><br><span class="line">        console.log(&quot;unmute audio:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;mute-video&quot;, function (evt) &#123; // 对方关闭摄像头</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;关闭了摄像头&quot;);</span><br><span class="line">        console.log(&quot;mute video&quot; + uid);</span><br><span class="line">        //alert(&quot;mute video:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    rtc.client.on(&quot;unmute-video&quot;, function (evt) &#123; // 对方打开了摄像头</span><br><span class="line">        var uid = evt.uid;</span><br><span class="line">        Notification.info(&quot;用户&quot;+uid+&quot;打开了了摄像头&quot;);</span><br><span class="line">        console.log(&quot;unmute video:&quot; + uid);</span><br><span class="line">    &#125;);</span><br><span class="line">    // ---- 订阅结束</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 开始声网</span><br><span class="line">const agoraFunction = function(thet)&#123;</span><br><span class="line">    // 创建客户端</span><br><span class="line">    if(rtc.joined)&#123;</span><br><span class="line">        Notification.info(&quot;您已经加入频道&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;;</span><br><span class="line">    rtc.client = AgoraRTC.createClient(&#123;mode: &quot;live&quot;, codec: &quot;vp8&quot;&#125;);</span><br><span class="line">    rtc.params = &#123;mode:&apos;live&apos;, codec: &apos;vp8&apos;&#125;; // 赋值输入框的值</span><br><span class="line">    Listening(thet); // 开始监听</span><br><span class="line">    // 初始化</span><br><span class="line">    rtc.client.init(option.appID, function () &#123;</span><br><span class="line">        console.log(&quot;初始化成功&quot;);</span><br><span class="line">        //加入频道</span><br><span class="line">        rtc.client.join(option.token ? option.token : null, option.channel, option.uid ? +option.uid : null, function (uid) &#123;</span><br><span class="line">            console.log(&quot;成功----频道号码: &quot; + option.channel + &quot;你的id: &quot; + uid);</span><br><span class="line">            rtc.joined = true;</span><br><span class="line">            rtc.params.uid = uid;</span><br><span class="line">            createStream(); // 创建本地流</span><br><span class="line">        &#125;, function(err) &#123;</span><br><span class="line">            console.error(&quot;加入频道失败&quot;, err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const getDevices =  function (next) &#123; // 获取音视频设备信息</span><br><span class="line">    AgoraRTC.getDevices(function (items) &#123;</span><br><span class="line">        items.filter(function (item) &#123;</span><br><span class="line">            return [&apos;audioinput&apos;, &apos;videoinput&apos;].indexOf(item.kind) !== -1</span><br><span class="line">        &#125;).map(function (item) &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name: item.label,</span><br><span class="line">                value: item.deviceId,</span><br><span class="line">                kind: item.kind,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        var videos = [];</span><br><span class="line">        var audios = [];</span><br><span class="line">        for (var i = 0; i &lt; items.length; i++) &#123;</span><br><span class="line">            var item = items[i];</span><br><span class="line">            if (&apos;videoinput&apos; == item.kind) &#123;</span><br><span class="line">                var name = item.label;</span><br><span class="line">                var value = item.deviceId;</span><br><span class="line">                if (!name) &#123;</span><br><span class="line">                    name = &quot;camera-&quot; + videos.length;</span><br><span class="line">                &#125;</span><br><span class="line">                videos.push(&#123;</span><br><span class="line">                    name: name,</span><br><span class="line">                    value: value,</span><br><span class="line">                    kind: item.kind</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (&apos;audioinput&apos; == item.kind) &#123;</span><br><span class="line">                var name = item.label;</span><br><span class="line">                var value = item.deviceId;</span><br><span class="line">                if (!name) &#123;</span><br><span class="line">                    name = &quot;microphone-&quot; + audios.length;</span><br><span class="line">                &#125;</span><br><span class="line">                audios.push(&#123;</span><br><span class="line">                    name: name,</span><br><span class="line">                    value: value,</span><br><span class="line">                    kind: item.kind</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#123;videos: videos, audios: audios&#125;);</span><br><span class="line">    //   next(&#123;videos: videos, audios: audios&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">    rtc, // 参数</span><br><span class="line">    option, // 参数</span><br><span class="line">    agoraFunction, // 声网开始的方法   </span><br><span class="line">    publish, // 发布本地流</span><br><span class="line">    unpublish, // 停止发布本地流</span><br><span class="line">    leave, // 离开频道</span><br><span class="line">    getDevices, // 获取可用的 摄像头 麦克风</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>到此结束</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;都是官方文档，仅供我自己巩固&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、准出&quot;&gt;&lt;a href=&quot;#1、准出&quot; class=&quot;headerlink&quot; title=&quot;1、准出&quot;&gt;&lt;/a&gt;1、准出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有个项目 vue(别的项目也行 r
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
      <category term="声网" scheme="http:/dongxin03.github.io/categories/vue/%E5%A3%B0%E7%BD%91/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="声网" scheme="http:/dongxin03.github.io/tags/%E5%A3%B0%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>webSocket用法</title>
    <link href="http://dongxin03.github.io/2019/12/16/webSocket%E7%94%A8%E6%B3%95/"/>
    <id>http://dongxin03.github.io/2019/12/16/webSocket%E7%94%A8%E6%B3%95/</id>
    <published>2019-12-16T01:48:27.000Z</published>
    <updated>2019-12-16T01:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在长时间连接，没有通讯时，实际情况可能会出现断连，所以要设置心跳包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">initSocket() &#123; // 初始化webSocket</span><br><span class="line">    let url = `ws://xxxxxxx`;</span><br><span class="line">    this.webSocket = new WebSocket(url)</span><br><span class="line">    this.webSocket.onopen = this.webSocketOnOpen</span><br><span class="line">    this.webSocket.onclose = this.webSocketOnClose</span><br><span class="line">    this.webSocket.onmessage = this.webSocketOnMessage</span><br><span class="line">    this.webSocket.onerror = this.webSocketOnError</span><br><span class="line">&#125;,</span><br><span class="line">webSocketOnOpen() &#123; // 连接成功</span><br><span class="line">    Notification.success(&quot;已连接，等待接入。&quot;)</span><br><span class="line">    console.log(&apos;websocket连接成功&apos;);</span><br><span class="line">    this.webHeart = setInterval(()=&gt;&#123; // webSoket 心跳包</span><br><span class="line">        this.webSocket.send(&quot;心跳包&quot;);</span><br><span class="line">    &#125;,60000)</span><br><span class="line">&#125;,</span><br><span class="line">webSocketOnMessage(res) &#123; // 等待接收数据 </span><br><span class="line">    console.log(&apos;===res=================================&apos;);</span><br><span class="line">    console.log(res);</span><br><span class="line">    console.log(&apos;====================================&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">webSocketOnClose() &#123;  // 连接关闭</span><br><span class="line">    this.socketClose = true;</span><br><span class="line">    clearInterval(this.webHeart); // 清除心跳包</span><br><span class="line">    console.log(&apos;websocket连接已关闭&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">webSocketOnError(res) &#123; // 连接失败</span><br><span class="line">    if(this.webHeart)&#123;</span><br><span class="line">        clearInterval(this.webHeart); // 清除心跳包</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(&apos;websocket连接失败&apos;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;在长时间连接，没有通讯时，实际情况可能会出现断连，所以要设置心跳包&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="webSocket" scheme="http:/dongxin03.github.io/tags/webSocket/"/>
    
  </entry>
  
  <entry>
    <title>webSocket和https的问题</title>
    <link href="http://dongxin03.github.io/2019/12/13/webSocket%E5%92%8Chttps%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://dongxin03.github.io/2019/12/13/webSocket%E5%92%8Chttps%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-12-13T07:54:03.000Z</published>
    <updated>2019-12-13T08:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>webSocket 与 https 报错</p></blockquote><ul><li>如果网站使用HTTPS，WebSocket必须要使用wss协议；</li><li>使用wss协议的连接请求必须只能写域名，而非IP+端口；</li><li>建议在URL域名后面为websocket定义一个路径，本例中是/wss/；</li></ul><hr><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><ul><li>前提是要配置好HTTPS，只需要在HTTPS配置的server内加一个location即可；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># websockets</span><br><span class="line">location /wss/ &#123;</span><br><span class="line">    proxy_pass http://xxx.xx.xx.xx:8006;           </span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>1、location /wss/ {…}这里要格外注意！<ul><li>html中的url是 wss://<a href="http://www.xxx.cn/wss/，所以Nginx配置中一定要是" target="_blank" rel="noopener">www.xxx.cn/wss/，所以Nginx配置中一定要是</a> /wss/<br>如果前端是 wss://<a href="http://www.xxx.cn/wss，Nginx对应是" target="_blank" rel="noopener">www.xxx.cn/wss，Nginx对应是</a> /wss</li></ul></li></ul><p>　　2、proxy_pass对应的最好是公网IP加端口号，我试过 ‘localhost’，’127.0.0.1’，域名都会失败</p><p>　　3、proxy_http_version 1.1 版本号必须是1.1，这条配置必需</p><p>说明：</p><p>　　Nginx反向代理，无论是HTTP/S或是WebSocket都会走443端口，由Nginx分发给各个项目服务器。在我的项目中WebSocket服务器是独立于Django的，监听端口为8006。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;webSocket 与 https 报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果网站使用HTTPS，WebSocket必须要使用wss协议；&lt;/li&gt;
&lt;li&gt;使用wss协议的连接请求必须只能写域名，而非IP+端口；&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="技巧" scheme="http:/dongxin03.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="webSocket" scheme="http:/dongxin03.github.io/tags/webSocket/"/>
    
      <category term="https" scheme="http:/dongxin03.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>react+electron搭建七牛云上传图片桌面端</title>
    <link href="http://dongxin03.github.io/2019/11/28/react+electron%E6%90%AD%E5%BB%BA%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%A1%8C%E9%9D%A2%E7%AB%AF/"/>
    <id>http://dongxin03.github.io/2019/11/28/react+electron%E6%90%AD%E5%BB%BA%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%A1%8C%E9%9D%A2%E7%AB%AF/</id>
    <published>2019-11-28T08:35:57.000Z</published>
    <updated>2019-11-29T09:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="咋想的"><a href="#咋想的" class="headerlink" title="咋想的"></a>咋想的</h3><blockquote><p>每次上传图到七牛云，都需要登录七牛云找到仓库，上传。步骤有些繁琐。所以自己做个上传的小工具。</p></blockquote><ul><li>自己画的原型图————简单、明了、好看<br><img src="http://youxiangshijie.cn/qiniuyunshangchuan.png?imageMogr2/auto-orient/thumbnail/!220x360r" alt="七牛云上传"><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3></li><li>1、拖拽和选择图片，获取图片信息</li><li>2、获取上传token</li><li>3、点击上传</li><li>4、包装electron<br>—— 简简单单的四步</li></ul><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ul><li>1、<code>create-react-app image-updata</code>搭建一个名字为image-updata的项目<br> <strong>这一步有必要且先执行这一步</strong><br> <strong><em>这时候<code>yarn start</code>就可以看到react页面里</em></strong><br> <img src="http://youxiangshijie.cn/create-react-page.png?imageMogr2/auto-orient/thumbnail/!120x360r" alt="react页面"></li><li>2、<strong><code>yarn eject</code> || <code>npm run eject</code></strong> 可以显示出webpack配置文件 （修改了启动端口，默认3000 —— 不改也行，修改了静态文件打包路径，改成了相对路径 –不改也行。。。）<ul><li><strong>修改启动端口</strong><br> 修改scripts/start.js 的DEFAULT_PORT （scripts文件夹没有？执行yarn eject）<br><img src="http://youxiangshijie.cn/xiugaiduankouhao.png?imageMogr2/auto-orient/thumbnail/!220x360r" alt="修改端口号"></li><li><strong>修改静态文件打包路径</strong><br> 在yarn build 的时候build文件夹下的index.html里引入文件都用的是绝对路径，会找不到，—所以可以修改打包路径<br> 修改config/paths.js 的 getServedPage方法里的 servedUrl这块’/‘改成’./‘<br><img src="http://youxiangshijie.cn/xiugai-dabao-jingtailujing.png?imageMogr2/auto-orient/thumbnail/!420x360r" alt="修改打包静态路径"></li><li><em>在执行<code>yarn eject</code>之后可能会报错，一般是缺少包，缺啥补啥就好*</em><br><img src="http://youxiangshijie.cn/webpack-baocuo.png?imageMogr2/auto-orient/thumbnail/!420x360r" alt="webpack报错"><br><code>yarn add @babel/helper-create-regexp-features-plugin</code></li></ul></li></ul><h3 id="开始写页面"><a href="#开始写页面" class="headerlink" title="开始写页面"></a>开始写页面</h3><ul><li>这里就比较简单，就一个页面所以把App.js改改就好</li><li><strong>一开始是这样的</strong><br><img src="http://youxiangshijie.cn/qiniu-react-page-yikaishi.png?imageMogr2/auto-orient/thumbnail/!320x360r" alt="一开始"></li><li><strong>简单改改之后(结构就这样的)</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">    &lt;div className=&quot;content&quot; key=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;set-button&quot;&gt;</span><br><span class="line">            &lt;span onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;上传&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&quot;select-content&quot;&gt;</span><br><span class="line">            &lt;div className=&quot;into&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;图片名称&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;p&gt;将图片拖入&lt;/p&gt;</span><br><span class="line">                &lt;p style=&#123;&#123;marginTop:&apos;30px&apos;,paddingTop:0&#125;&#125;&gt;100%&lt;/p&gt;</span><br><span class="line">                &lt;p style=&#123;&#123;marginTop:&apos;30px&apos;,paddingTop:0&#125;&#125;&gt;提示文字&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div className=&quot;select-image-button&quot;&gt;</span><br><span class="line">                &lt;input className=&quot;iamge-file&quot; type=&quot;file&quot; onChange=&#123;()=&gt;&#123;&#125;&#125;/&gt;</span><br><span class="line">                &lt;span&gt;选择图片&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div className=&quot;updata-url&quot; key=&quot;updata-url&quot;&gt;</span><br><span class="line">        &lt;p&gt;图片url:&lt;/p&gt;</span><br><span class="line">            &lt;p className=&quot;image-url&quot;&gt;图片地址&lt;/p&gt;</span><br><span class="line">        &lt;p className=&quot;copy&quot; onClick=&#123;this.urlCopy&#125;&gt;点击复制&lt;/p&gt;</span><br><span class="line">        &lt;input </span><br><span class="line">            className=&quot;copy_content&quot; </span><br><span class="line">            type=&quot;text&quot; </span><br><span class="line">            value=&quot;&quot;  </span><br><span class="line">            onChange=&#123;()=&gt;&#123;&#125;&#125;</span><br><span class="line">            style=&#123;&#123;position: &apos;absolute&apos;,&apos;top&apos;:0,&apos;left&apos;: 0,&apos;opacity&apos;: 0,&apos;zIndex&apos;:&apos;-10&apos;&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>样式修改App.css,我就不多说了</li></ul></li><li><strong>这时候的页面</strong><br><img src="http://youxiangshijie.cn/qiniu-react-page-xiugaihoudepage.png?imageMogr2/auto-orient/thumbnail/!320x360r" alt="这时候的页面"></li></ul><h3 id="开始步骤-1-拖拽和选择图片获取图片信息"><a href="#开始步骤-1-拖拽和选择图片获取图片信息" class="headerlink" title="开始步骤 1 拖拽和选择图片获取图片信息"></a>开始步骤 1 拖拽和选择图片获取图片信息</h3><ul><li>1、<strong>拖拽图片放下的时候获取图片信息</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pullImageFunct()&#123; // 拖拽图片获取</span><br><span class="line">    this.dropEle = document.querySelector(&apos;.into&apos;); // 监听的鼠标放下区域</span><br><span class="line">    const thse = this;</span><br><span class="line">    this.dropEle.addEventListener(&quot;dragenter&quot;, function (e) &#123; //文件拖拽进</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;, false);</span><br><span class="line">    this.dropEle.addEventListener(&quot;dragover&quot;, function (e) &#123; //文件拖拽在悬浮</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;, false);</span><br><span class="line">    this.dropEle.addEventListener(&quot;dragleave&quot;, function (e) &#123;//文件拖拽离开</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;, false);</span><br><span class="line">    this.dropEle.addEventListener(&quot;drop&quot;, function (e) &#123;//文件拖拽放下</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        // 处理拖拽文件的逻辑</span><br><span class="line">        var df = e.dataTransfer;</span><br><span class="line">        for(var i = 0; i &lt; df.items.length; i++) &#123;</span><br><span class="line">            var item = df.items[i];</span><br><span class="line">            if(item.kind === &quot;file&quot; &amp;&amp; item.webkitGetAsEntry().isFile) &#123;</span><br><span class="line">                var file = item.getAsFile();</span><br><span class="line">                thse.setImageInfo(file); // 统一设置文件信息</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>要禁止拖进、悬浮、拖出事件，否则会跳转</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    this.pullImageFunct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>拖拽事件需要监听</strong></li></ul></li><li>2、<strong>文件选择</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inputFunct(e)&#123; // 选择图片</span><br><span class="line">    const path = e.target.files[0][&apos;path&apos;]; // 文件路径</span><br><span class="line">    const type = e.target.files[0][&apos;type&apos;]; </span><br><span class="line">    // 正则去文件名字  /.*\/([^\/]+)\..+/</span><br><span class="line">    const rgx = /.*\/([^\/]+)/;</span><br><span class="line">    const name = rgx.exec(path)[1];</span><br><span class="line">    this.setImageInfo(&#123;path,name,type&#125;) // 统一设置文件信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>需要在input的change事件执行</strong></li><li></li><li>统一设置文件信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setImageInfo(info)&#123; // 设置上传参数</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        imagePath:info.path,</span><br><span class="line">        selectImgName:info.name,</span><br><span class="line">        imageType:info.type,</span><br><span class="line">        showMessage:false,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>这个时候就可以拿到文件的path、type、name。第一步完成</strong></li></ul><h3 id="开始步骤-2-获取上传token"><a href="#开始步骤-2-获取上传token" class="headerlink" title="开始步骤 2 获取上传token"></a>开始步骤 2 获取上传token</h3><blockquote><p>七牛上传的时候需要token，获取tokan，需要accessKey，secretKey，都可以在七牛找到<br><strong>可以在密钥管理中找到</strong></p></blockquote><p><img src="http://youxiangshijie.cn/qiniu-react-page-key.png?imageMogr2/auto-orient/thumbnail/!320x360r" alt="密钥管理"></p><ul><li><strong>获取token</strong><br><code>yarn add qiniu</code> 安装qnniu </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import nodeQiniu from &apos;qiniu&apos;;</span><br><span class="line">const accessKey = &apos;&apos;; // 你的密钥</span><br><span class="line">const secretKey = &apos;&apos;; // 你的密钥</span><br><span class="line">getToKen()&#123; // 获取token</span><br><span class="line">    return new Promise((res,rej)=&gt;&#123;</span><br><span class="line">        const bucket = &apos;image_list&apos;; // 这是你的图片仓库名</span><br><span class="line">        let mac = new nodeQiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class="line">        let options = &#123;</span><br><span class="line">            scope: bucket,</span><br><span class="line">            expires: 3600 * 24 // 密钥过期时间</span><br><span class="line">        &#125;;</span><br><span class="line">        let putPolicy =  new nodeQiniu.rs.PutPolicy(options);</span><br><span class="line">        let uploadToken= putPolicy.uploadToken(mac);</span><br><span class="line">        if(uploadToken)&#123;</span><br><span class="line">            res(uploadToken); // 你的上传token</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            rej();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>这是好你的密钥和图片仓库名，就可以拿到密钥</strong></li></ul><h3 id="开始步骤-3-上传图片"><a href="#开始步骤-3-上传图片" class="headerlink" title="开始步骤 3 上传图片"></a>开始步骤 3 上传图片</h3><p><code>qiniu.upload</code> 是七牛上传图片的api，需要blob格式的图片<br><strong>图片设置blob,在点击上传click执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">imageBlob()&#123; //获取图片 blob</span><br><span class="line">    const ther = this;</span><br><span class="line">    const &#123;imagePath&#125; = this.state; //文件路径</span><br><span class="line">    if(!imagePath)&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            showMessage:true,</span><br><span class="line">            message:&apos;未获取到图片&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    const xhr = new XMLHttpRequest(); // ajax请求图片</span><br><span class="line">    xhr.open(&quot;get&quot;, `file://$&#123;imagePath&#125;`, true);</span><br><span class="line">    xhr.responseType = &quot;blob&quot;;</span><br><span class="line">    xhr.onload = async function () &#123;</span><br><span class="line">        if (this.status === 200) &#123;</span><br><span class="line">            //得到一个blob对象</span><br><span class="line">            var blob = this.response; // 图片blob</span><br><span class="line">            const token = await ther.getToKen(); // 获取token</span><br><span class="line">            ther.imageUpData(&#123;token,blob&#125;) // 上传图片</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上传</strong><br><code>yarn add qiniu-js</code> 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">imageUpData(&#123;token,blob&#125;)&#123; // 上传图片 token,blob</span><br><span class="line">    const &#123;selectImgName,imageType&#125; = this.state; //图片名称和图片type</span><br><span class="line">    const ther = this;</span><br><span class="line">    const putExtra = &#123; // 上传需要的参数</span><br><span class="line">        fname: &quot;&quot;,</span><br><span class="line">        params: &#123;&#125;,</span><br><span class="line">        mimeType: [imageType]</span><br><span class="line">    &#125;;</span><br><span class="line">    const config = &#123; // 上传需要的参数</span><br><span class="line">        useCdnDomain: true,</span><br><span class="line">        region: qiniu.region.z2</span><br><span class="line">    &#125;;</span><br><span class="line">    const observable = qiniu.upload(blob,selectImgName,token,putExtra,config);</span><br><span class="line">    observable.subscribe(&#123;</span><br><span class="line">        next(res)&#123;</span><br><span class="line">            ther.setState(&#123;</span><br><span class="line">                progress:res.total.percent.toFixed(2) // 进度</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        error(err)&#123; // 失败</span><br><span class="line">            if(err.code == 401)&#123;</span><br><span class="line">                ther.setState(&#123;</span><br><span class="line">                    showMessage:true,</span><br><span class="line">                    message:&apos;密钥错误，检查密钥&apos;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                ther.setState(&#123;</span><br><span class="line">                    showMessage:true,</span><br><span class="line">                    message:err.message</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        complete(res)&#123; // 成功</span><br><span class="line">            ther.setState(&#123;</span><br><span class="line">                loadUrl:res.key,</span><br><span class="line">                progress:0,</span><br><span class="line">                isSuccess:true,</span><br><span class="line">                message:&apos;成功--点击下方复制url&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>这时候就可以上传图片了</strong></li><li></li><li><strong>点击复制</strong></li><li>需要设置个图片仓库中使用的域名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const host = &apos;&apos;; //你的图片仓库使用的域名 </span><br><span class="line">urlCopy()&#123; //点击复制url</span><br><span class="line">        const &#123;loadUrl&#125; = this.state; // 上传后返回的路径</span><br><span class="line">        const inputElement = document.querySelector(&apos;.copy_content&apos;); // 点击复制只能在input上</span><br><span class="line">        inputElement.value = host+loadUrl;</span><br><span class="line">        inputElement.select(); // 必须</span><br><span class="line">        document.execCommand(&quot;Copy&quot;); // 浏览器提供</span><br><span class="line">        global.alert(&apos;复制成功&apos;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始步骤-4-包装electron"><a href="#开始步骤-4-包装electron" class="headerlink" title="开始步骤 4 包装electron"></a>开始步骤 4 包装electron</h3><p><code>npm install electron --save-dev</code> 安装 <strong><em>这一步会很慢，可以转taobao的源</em></strong></p><ul><li>在根目录创建 main.js 和 renderer.js<br><img src="http://youxiangshijie.cn/qiniu-react-mainjs.png?imageMogr2/auto-orient/thumbnail/!320x360r" alt="mainjs"></li><li><strong>main.js 本地测试注意端口号</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&apos;electron&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">let mainWindow = null;</span><br><span class="line">//判断命令行脚本的第二参数是否含--debug</span><br><span class="line">const debug = /--debug/.test(process.argv[2]);</span><br><span class="line">function makeSingleInstance () &#123;</span><br><span class="line">    if (process.mas) return;</span><br><span class="line">    app.requestSingleInstanceLock();</span><br><span class="line">    app.on(&apos;second-instance&apos;, () =&gt; &#123;</span><br><span class="line">        if (mainWindow) &#123;</span><br><span class="line">            if (mainWindow.isMinimized()) mainWindow.restore()</span><br><span class="line">            mainWindow.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function createWindow () &#123;</span><br><span class="line">    mainWindow = new BrowserWindow(&#123;</span><br><span class="line">        width: 300,</span><br><span class="line">        height: 500,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            javascript: true,</span><br><span class="line">            plugins: true,</span><br><span class="line">            nodeIntegration: true, // 是否集成 Nodejs</span><br><span class="line">            webSecurity: false,</span><br><span class="line">            preload: path.join(__dirname, &apos;./renderer.js&apos;) // 但预加载的 js 文件内仍可以使用 Nodejs 的 API</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.loadURL(&quot;http://localhost:8403/&quot;); //本地测试注意端口号</span><br><span class="line">    // mainWindow.loadURL(path.join(&apos;file://&apos;,__dirname,&apos;/build/index.html&apos;)); //打包使用</span><br><span class="line"></span><br><span class="line">    //接收渲染进程的信息</span><br><span class="line">    const ipc = require(&apos;electron&apos;).ipcMain;</span><br><span class="line">    ipc.on(&apos;min&apos;, function () &#123;</span><br><span class="line">        mainWindow.minimize();</span><br><span class="line">    &#125;);</span><br><span class="line">    ipc.on(&apos;max&apos;, function () &#123;</span><br><span class="line">        mainWindow.maximize();</span><br><span class="line">    &#125;);</span><br><span class="line">    ipc.on(&quot;login&quot;,function () &#123;</span><br><span class="line">        mainWindow.maximize();</span><br><span class="line">    &#125;);</span><br><span class="line">    mainWindow.on(&apos;closed&apos;, () =&gt; &#123;</span><br><span class="line">        mainWindow = null</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">makeSingleInstance();</span><br><span class="line">//app主进程的事件和方法</span><br><span class="line">app.on(&apos;ready&apos;, () =&gt; &#123;</span><br><span class="line">    createWindow();</span><br><span class="line">&#125;);</span><br><span class="line">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class="line">    if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class="line">    if (mainWindow === null) &#123;</span><br><span class="line">        createWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = mainWindow;</span><br></pre></td></tr></table></figure></li><li><strong>renderer.js 必须</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.electron = require(&apos;electron&apos;);</span><br></pre></td></tr></table></figure></li><li><em>修改package.json*</em></li><li>添加main.js<br><img src="http://youxiangshijie.cn/qiniu-react-shezhipack.png?imageMogr2/auto-orient/thumbnail/!220x160r" alt="main.js"></li><li>设置启动命令<br><code>&quot;start&quot;: &quot;node scripts/start.js | electron . --debug&quot;,</code></li></ul><p><em>这个时候关闭服务，在启动服务<code>yarn start</code>，就可以在electron中启动了<br>*</em>有时候会出现端口占用的情况**<br>mac 可以 <code>lsof -i :端口号</code> 看端口占中  <code>kill -9 PID</code> 关闭进程<br>*<br>*</p><ul><li><strong>最后一步打包</strong><br><code>npm install electron-packager --save-dev</code> 安装electron 打包工具<ul><li>package.json 添加打包命令<br><code>&quot;package&quot;: &quot;electron-packager ./&quot;</code><br><img src="http://youxiangshijie.cn/qiniu-react-dabaomingling.png?imageMogr2/auto-orient/thumbnail/!220x160r" alt="打包命令"></li><li>修改main.js中的mainWindow.loadURL<br><code>mainWindow.loadURL(path.join(&#39;file://&#39;,__dirname,&#39;/build/index.html&#39;))</code></li></ul></li><li>执行 <code>yarn package</code> 会在根目录创建一个打包文件可以直接使用</li><li>可以修改<code>yarn package</code>命令定制打包名称、地址、打包系统、图标</li><li>什么都没设置会根据本地系统生成打包文件（我在mac上可以）<br><img src="http://youxiangshijie.cn/qiniu-react-dabaodewenjain.png?imageMogr2/auto-orient/thumbnail/!220x160r" alt="打包的文件"></li></ul><p><a href="https://github.com/dongxin03/react-electron-image-updata" target="_blank" rel="noopener">github位置</a></p><ul><li>到此结束</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;咋想的&quot;&gt;&lt;a href=&quot;#咋想的&quot; class=&quot;headerlink&quot; title=&quot;咋想的&quot;&gt;&lt;/a&gt;咋想的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每次上传图到七牛云，都需要登录七牛云找到仓库，上传。步骤有些繁琐。所以自己做个上传的小工具。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="react" scheme="http:/dongxin03.github.io/categories/react/"/>
    
      <category term="七牛云" scheme="http:/dongxin03.github.io/categories/react/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="react" scheme="http:/dongxin03.github.io/tags/react/"/>
    
      <category term="election" scheme="http:/dongxin03.github.io/tags/election/"/>
    
  </entry>
  
  <entry>
    <title>vue 6、api盲点</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%206%E3%80%81api%E7%9B%B2%E7%82%B9/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%206%E3%80%81api%E7%9B%B2%E7%82%B9/</id>
    <published>2019-11-25T08:20:33.000Z</published>
    <updated>2019-11-25T08:14:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用performance开启性能追踪"><a href="#使用performance开启性能追踪" class="headerlink" title="使用performance开启性能追踪"></a>使用performance开启性能追踪</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">    Vue.config.performance = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>是开发环境的时候开启</li><li>开启后我们可以下载 Vue Performance Devtool 这一 chrome 插件来看查看各个组件的加载情况<h2 id="使用errorHandler-来捕获异常"><a href="#使用errorHandler-来捕获异常" class="headerlink" title="使用errorHandler 来捕获异常"></a>使用errorHandler 来捕获异常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = function (err, vm, info) &#123;</span><br><span class="line">    let &#123; </span><br><span class="line">        message, // 异常信息</span><br><span class="line">        name, // 异常名称</span><br><span class="line">        stack  // 异常堆栈信息</span><br><span class="line">    &#125; = err;</span><br><span class="line">    // vm 为抛出异常的 Vue 实例</span><br><span class="line">    // info 为 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在入口文件中加入上述代码后，我们便可以捕获到 Vue 项目中的一些异常信息了，但是需要注意的是 Vue 2.4.0 起的版本才支持捕获 Vue 自定义事件处理函数内部的错误<h2 id="使用nextTick将回调延迟到下次DOM更新循环之后执行"><a href="#使用nextTick将回调延迟到下次DOM更新循环之后执行" class="headerlink" title="使用nextTick将回调延迟到下次DOM更新循环之后执行"></a>使用nextTick将回调延迟到下次DOM更新循环之后执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul ref=&quot;box&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;index&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            arr: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">    this.getData();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getData() &#123;</span><br><span class="line">            this.arr = [1, 2, 3];</span><br><span class="line">            this.$refs.box.getElementsByTagName(&apos;li&apos;)[0].innerHTML = &apos;hello&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>在DOM元素li还未渲染就调用会报错</li><li>可以将方法放到nextTick回调中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">    this.$refs.box.getElementsByTagName(&apos;li&apos;)[0].innerHTML = &apos;hello&apos;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>也可以使用async/await<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    async getData() &#123;</span><br><span class="line">        this.arr = [1, 2, 3];</span><br><span class="line">        </span><br><span class="line">        await this.$nextTick();</span><br><span class="line">        </span><br><span class="line">        this.$refs.box.getElementsByTagName(&apos;li&apos;)[0].innerHTML = &apos;hello&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对低开销的静态组件使用v-once"><a href="#对低开销的静态组件使用v-once" class="headerlink" title="对低开销的静态组件使用v-once"></a>对低开销的静态组件使用v-once</h2></li><li>v-once指令用于只渲染元素和组件一次</li><li>一般可以用于存在大量静态数据组件的更新性能优化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-once :data=&quot;msg&quot;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure></li><li>msg 的值如何变化，组件内渲染的永远是其第一次获取到的初始值。</li><li>使用$isServer判断当前实例是否运行与服务器</li><li>使用$isServer则无需进行配置，在组件中直接使用API即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (this.$isServer) &#123;</span><br><span class="line">    document.title = &apos;test&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用performance开启性能追踪&quot;&gt;&lt;a href=&quot;#使用performance开启性能追踪&quot; class=&quot;headerlink&quot; title=&quot;使用performance开启性能追踪&quot;&gt;&lt;/a&gt;使用performance开启性能追踪&lt;/h2&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="api" scheme="http:/dongxin03.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>vue 4、编码技巧与规范</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%205%E3%80%81%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B8%8E%E8%A7%84%E8%8C%83/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%205%E3%80%81%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B8%8E%E8%A7%84%E8%8C%83/</id>
    <published>2019-11-25T08:19:33.000Z</published>
    <updated>2019-11-25T08:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用对象代替-if-及-switch"><a href="#使用对象代替-if-及-switch" class="headerlink" title="使用对象代替 if 及 switch"></a>使用对象代替 if 及 switch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;lisi&apos;;</span><br><span class="line">let obj = &#123;</span><br><span class="line">    zhangsan: 21,</span><br><span class="line">    lisi: 18,</span><br><span class="line">    wangwu: 12</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let age = obj[name] || 18;</span><br></pre></td></tr></table></figure><ul><li>判断过后有较多处理逻辑的还需要使用if或者switch<h2 id="使用Array-from-快速生成数组"><a href="#使用Array-from-快速生成数组" class="headerlink" title="使用Array.from 快速生成数组"></a>使用Array.from 快速生成数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let hours = Array.from(&#123; length: 24 &#125;, (value, index) =&gt; index + &apos;时&apos;);</span><br></pre></td></tr></table></figure><h2 id="使用router-beforeEach处理跳转前逻辑"><a href="#使用router-beforeEach处理跳转前逻辑" class="headerlink" title="使用router.beforeEach处理跳转前逻辑"></a>使用router.beforeEach处理跳转前逻辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">// 首页</span><br><span class="line">const Home = (resolve =&gt; &#123;</span><br><span class="line">    require.ensure([&apos;../views/home.vue&apos;], () =&gt; &#123;</span><br><span class="line">        resolve(require(&apos;../views/home.vue&apos;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let base = `$&#123;process.env.BASE_URL&#125;`;</span><br><span class="line"></span><br><span class="line">let router =  new Router(&#123;</span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    base: base,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            name: &apos;home&apos;,</span><br><span class="line">            component: Home,</span><br><span class="line">            meta: &#123; title: &apos;首页&apos; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">    let title = to.meta &amp;&amp; to.meta.title;</span><br><span class="line">    </span><br><span class="line">    if (title) &#123;</span><br><span class="line">        document.title = title; // 设置页面 title</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (to.name === &apos;home&apos;) &#123;</span><br><span class="line">    </span><br><span class="line">        // 拦截并跳转至 page2 单页，$openRouter 方法在第 5 节中封装</span><br><span class="line">        Vue.$openRouter(&#123;</span><br><span class="line">            name: &apos;page2&apos;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></li><li><em>注意最后需要调用next()方法执行路由跳转*</em><h2 id="路由跳转尽量使用name而不是path"><a href="#路由跳转尽量使用name而不是path" class="headerlink" title="路由跳转尽量使用name而不是path"></a>路由跳转尽量使用name而不是path</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123; </span><br><span class="line">    name: &apos;page1&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 而不是</span><br><span class="line">this.$router.push(&#123; </span><br><span class="line">    path: &apos;page1&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="循环渲染添加-v-bind-key-key-尽量使用id而不是index"><a href="#循环渲染添加-v-bind-key-key-尽量使用id而不是index" class="headerlink" title="循环渲染添加 v-bind:key || :key (尽量使用id而不是index)"></a>循环渲染添加 v-bind:key || :key (尽量使用id而不是index)</h2></li><li>因为如果在数组中间插入值，其之后的index会发生该拜年，即使数据没变Vue也会进行重新渲染；</li></ul><h2 id="使用computed代替watch"><a href="#使用computed代替watch" class="headerlink" title="使用computed代替watch"></a>使用computed代替watch</h2><ul><li>watch:当监测的属性变化时会自动执行对应的回调函数</li><li>computed: 计算属性只有在它的相关依赖发生改变时才会重新求值<h2 id="统一管理缓存变量"><a href="#统一管理缓存变量" class="headerlink" title="统一管理缓存变量"></a>统一管理缓存变量</h2></li><li>使用整合的常量管理</li><li>types.js <h2 id="使用setTimeout-代替-setInterval"><a href="#使用setTimeout-代替-setInterval" class="headerlink" title="使用setTimeout 代替 setInterval"></a>使用setTimeout 代替 setInterval</h2><h2 id="不要使用for-in-循环遍历数组"><a href="#不要使用for-in-循环遍历数组" class="headerlink" title="不要使用for in 循环遍历数组"></a>不要使用for in 循环遍历数组</h2></li><li>其会遍历数组原型链上的属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2];</span><br><span class="line"></span><br><span class="line">for (let key in arr) &#123;</span><br><span class="line">    console.log(arr[key]); // 会正常打印 1, 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 但是如果在 Array 原型链上添加一个方法</span><br><span class="line">Array.prototype.test = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">for (let key in arr) &#123;</span><br><span class="line">    console.log(arr[key]); // 此时会打印 1, 2, ƒ () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用对象代替-if-及-switch&quot;&gt;&lt;a href=&quot;#使用对象代替-if-及-switch&quot; class=&quot;headerlink&quot; title=&quot;使用对象代替 if 及 switch&quot;&gt;&lt;/a&gt;使用对象代替 if 及 switch&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="技巧" scheme="http:/dongxin03.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue 4、项目整合与优化</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%204%E3%80%81%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%204%E3%80%81%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2019-11-25T08:15:33.000Z</published>
    <updated>2019-11-25T08:10:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用alias简化路径"><a href="#使用alias简化路径" class="headerlink" title="使用alias简化路径"></a>使用alias简化路径</h2><ul><li>在原声webpack配置中我们可以定义alias来简化路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const resolve = dir =&gt; &#123;</span><br><span class="line">    return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            &apos;@&apos;: resolve(&apos;src&apos;), // 定义 src 目录变量</span><br><span class="line">            _lib: resolve(&apos;src/common&apos;), // 定义 common 目录变量,</span><br><span class="line">            _com: resolve(&apos;src/components&apos;), // 定义 components 目录变量,</span><br><span class="line">            _img: resolve(&apos;src/images&apos;), // 定义 images 目录变量,</span><br><span class="line">            _ser: resolve(&apos;src/services&apos;), // 定义 services 目录变量,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在vue-cli 3.x中我们需要处理vue.config.js</li><li>chainWebpack<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* vue.config.js */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&apos;@&apos;, resolve(&apos;src&apos;))</span><br><span class="line">            .set(&apos;_lib&apos;, resolve(&apos;src/common&apos;))</span><br><span class="line">            .set(&apos;_com&apos;, resolve(&apos;src/components&apos;))</span><br><span class="line">            .set(&apos;_img&apos;, resolve(&apos;src/images&apos;))</span><br><span class="line">            .set(&apos;_ser&apos;, resolve(&apos;src/services&apos;))</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>需要注意的是对于在样式及html模版中引用路径的简写时，前面需要加上～，否则历经解析会失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.img &#123;</span><br><span class="line">    background: (~_img/home.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开启Gzip压缩"><a href="#开启Gzip压缩" class="headerlink" title="开启Gzip压缩"></a>开启Gzip压缩</h2></li><li>compression-webpack-plugin开启Gzip压缩</li><li>在vue.config.js中通过configureWebpack中返回一个对象来实现plugins的合并<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* vue.config.js */</span><br><span class="line">const isPro = process.env.NODE_ENV === &apos;production&apos;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    configureWebpack: config =&gt; &#123;</span><br><span class="line">        if (isPro) &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    new CompressionWebpackPlugin(&#123;</span><br><span class="line">                         // 目标文件名称。[path] 被替换为原始文件的路径和 [query] 查询</span><br><span class="line">                        filename: &apos;[path].gz[query]&apos;,</span><br><span class="line">                        // 使用 gzip 压缩</span><br><span class="line">                        algorithm: &apos;gzip&apos;, </span><br><span class="line">                        // 处理与此正则相匹配的所有文件</span><br><span class="line">                        test: new RegExp(</span><br><span class="line">                            &apos;\\.(js|css)$&apos;</span><br><span class="line">                        ),</span><br><span class="line">                        // 只处理大于此大小的文件</span><br><span class="line">                        threshold: 10240,</span><br><span class="line">                        // 最小压缩比达到 0.8 时才会被压缩</span><br><span class="line">                        minRatio: 0.8，</span><br><span class="line">                    &#125;)</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上方我们通过在生产环境中增加 Gzip 压缩配置实现了打包后输出增加对应的 .gz 为后缀的文件，而由于我们配置项中配置的是只压缩大小超过 10240B（10kB）的 JS 及 CSS，因此不满足条件的文件不会进行 Gzip 压缩。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用alias简化路径&quot;&gt;&lt;a href=&quot;#使用alias简化路径&quot; class=&quot;headerlink&quot; title=&quot;使用alias简化路径&quot;&gt;&lt;/a&gt;使用alias简化路径&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在原声webpack配置中我们可以定义alias来简化路
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="优化" scheme="http:/dongxin03.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vue 3、单页面|多页面</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%203%E3%80%81%E5%8D%95%E9%A1%B5%E9%9D%A2|%E5%A4%9A%E9%A1%B5%E9%9D%A2/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%203%E3%80%81%E5%8D%95%E9%A1%B5%E9%9D%A2|%E5%A4%9A%E9%A1%B5%E9%9D%A2/</id>
    <published>2019-11-25T08:05:33.000Z</published>
    <updated>2019-11-25T08:11:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单页面-–-多页面"><a href="#单页面-–-多页面" class="headerlink" title="单页面 – 多页面"></a>单页面 – 多页面</h2><ul><li>单页面有一个html ，多页面有多个html</li><li>多页面应用拥有多个独立的入口文件、组件、路由、vuex等<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules               # 项目依赖包目录</span><br><span class="line">├── build                      # 项目 webpack 功能目录</span><br><span class="line">├── config                     # 项目配置项文件夹</span><br><span class="line">├── src                        # 前端资源目录</span><br><span class="line">│   ├── images                 # 图片目录</span><br><span class="line">│   ├── components             # 公共组件目录</span><br><span class="line">│   ├── pages                  # 页面目录</span><br><span class="line">│   │   ├── page1              # page1 目录</span><br><span class="line">│   │   │   ├── components     # page1 组件目录</span><br><span class="line">│   │   │   ├── router         # page1 路由目录</span><br><span class="line">│   │   │   ├── views          # page1 页面目录</span><br><span class="line">│   │   │   ├── page1.html     # page1 html 模板</span><br><span class="line">│   │   │   ├── page1.vue      # page1 vue 配置文件</span><br><span class="line">│   │   │   └── page1.js       # page1 入口文件</span><br><span class="line">│   │   ├── page2              # page2 目录</span><br><span class="line">│   │   └── index              # index 目录</span><br><span class="line">│   ├── common                 # 公共方法目录</span><br><span class="line">│   └── store                  # 状态管理 store 目录</span><br><span class="line">├── .gitignore                 # git 忽略文件</span><br><span class="line">├── .env                       # 全局环境配置文件</span><br><span class="line">├── .env.dev                   # 开发环境配置文件</span><br><span class="line">├── .postcssrc.js              # postcss 配置文件</span><br><span class="line">├── babel.config.js            # babel 配置文件</span><br><span class="line">├── package.json               # 包管理文件</span><br><span class="line">├── vue.config.js              # CLI 配置文件</span><br><span class="line">└── yarn.lock                  # yarn 依赖信息文件</span><br></pre></td></tr></table></figure><h3 id="多个入口文件"><a href="#多个入口文件" class="headerlink" title="多个入口文件"></a>多个入口文件</h3></li><li>需要配置webpack中的entry属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    entry: &#123;</span><br><span class="line">        page1: &apos;/xxx/pages/page1/page1.js&apos;,</span><br><span class="line">        page2: &apos;/xxx/pages/page2/page2.js&apos;,</span><br><span class="line">        index: &apos;/xxx/pages/index/index.js&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如何读取这些路径，需要新建build文件夹存放utils.js这样公用的webpack功能性文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/* utils.js */</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// glob 是 webpack 安装时依赖的一个第三方模块，该模块允许你使用 * 等符号,</span><br><span class="line">// 例如 lib/*.js 就是获取 lib 文件夹下的所有 js 后缀名的文件</span><br><span class="line">// yarn add glob --dev</span><br><span class="line">const glob = require(&apos;glob&apos;);</span><br><span class="line"></span><br><span class="line">// 取得相应的页面路径，因为之前的配置，所以是 src 文件夹下的 pages 文件夹</span><br><span class="line">const PAGE_PATH = path.resolve(__dirname, &apos;../src/pages&apos;);</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">* 多入口配置</span><br><span class="line">* 通过 glob 模块读取 pages 文件夹下的所有对应文件夹下的 js * 后缀文件，如果该文件存在</span><br><span class="line">* 那么就作为入口处理</span><br><span class="line">*/</span><br><span class="line">exports.getEntries = () =&gt; &#123;</span><br><span class="line">    let entryFiles = glob.sync(PAGE_PATH + &apos;/*/*.js&apos;) // 同步读取所有入口文件</span><br><span class="line">    let map = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 遍历所有入口文件</span><br><span class="line">    entryFiles.forEach(filePath =&gt; &#123;</span><br><span class="line">        // 获取文件名</span><br><span class="line">        let filename = filePath.substring(filePath.lastIndexOf(&apos;\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;))</span><br><span class="line">        </span><br><span class="line">        // 以键值对的形式存储</span><br><span class="line">        map[filename] = filePath </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>读取并存储完毕后，我们得到了一个入口文件的对象集合，这个对象我们便可以将其设置到 webpack 的 entry 属性上，这里我们需要修改 vue.config.js 的配置来间接修改 webpack 的值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* vue.config.js */</span><br><span class="line"></span><br><span class="line">const utils = require(&apos;./build/utils&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    configureWebpack: config =&gt; &#123;</span><br><span class="line">        config.entry = utils.getEntries()</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单页面-–-多页面&quot;&gt;&lt;a href=&quot;#单页面-–-多页面&quot; class=&quot;headerlink&quot; title=&quot;单页面 – 多页面&quot;&gt;&lt;/a&gt;单页面 – 多页面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单页面有一个html ，多页面有多个html&lt;/li&gt;
&lt;li&gt;多页面应
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="页面" scheme="http:/dongxin03.github.io/tags/%E9%A1%B5%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>vue 2、router|vuex|api</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%202%E3%80%81router|vuex|api/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%202%E3%80%81router|vuex|api/</id>
    <published>2019-11-25T08:01:47.000Z</published>
    <updated>2019-11-25T08:01:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* router.js */</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import Home from &apos;./views/Home.vue&apos; // 引入 Home 组件</span><br><span class="line">import About from &apos;./views/About.vue&apos; // 引入 About 组件</span><br><span class="line"></span><br><span class="line">Vue.use(Router) // 注册路由</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        name: &apos;home&apos;,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        path: &apos;/about&apos;,</span><br><span class="line">        name: &apos;about&apos;,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>如果路由存在二级目录，需要添加base属性，否则默认为”/“</li><li>默认路由模式是hash模式，会携带#标记，与真是url不符合，可以还未history模式</li><li>页面组件没有进行按需加载，可以使用require.ensure()来进行优化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/* router.js */</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line"></span><br><span class="line">// 引入 Home 组件</span><br><span class="line">const Home = resolve =&gt; &#123;</span><br><span class="line">    require.ensure([&apos;./views/Home.vue&apos;], () =&gt; &#123;</span><br><span class="line">        resolve(require(&apos;./views/Home.vue&apos;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 引入 About 组件</span><br><span class="line">const About = resolve =&gt; &#123;</span><br><span class="line">    require.ensure([&apos;./views/About.vue&apos;], () =&gt; &#123;</span><br><span class="line">        resolve(require(&apos;./views/About.vue&apos;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">let base = `$&#123;process.env.BASE_URL&#125;` // 动态获取二级目录</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    base: base,</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        name: &apos;home&apos;,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        path: &apos;/about&apos;,</span><br><span class="line">        name: &apos;about&apos;,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>当然，处理使用reauire.ensure来拆分代码，Vue Router官方文档还推荐使用动态import 愈发来进行代码分块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入 Home 组件</span><br><span class="line">const Home = () =&gt; import(&apos;./views/Home.vue&apos;);</span><br><span class="line"></span><br><span class="line">// 引入 About 组件</span><br><span class="line">const About = () =&gt; import(&apos;./views/About.vue&apos;);</span><br></pre></td></tr></table></figure></li><li>如果你想给拆分出的文件命名，可以尝试一下webpack提供的Magic Comments（魔法注释）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Home = () =&gt; import(/* webpackChunkName:&apos;home&apos;*/ &apos;./views/Home.vue&apos;);</span><br></pre></td></tr></table></figure><h2 id="Vuex配置"><a href="#Vuex配置" class="headerlink" title="Vuex配置"></a>Vuex配置</h2></li><li>vue-cli 生成的store<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>主要是4个核心点</li></ul><ol><li>state 存放变量   this.$store.state 获取</li><li>getters 计算变量  计算state后返回  this.$store.getter || mapGetters 获取</li><li>mutations 修改state值唯一的办法是派发 mutaion  this.$store.commit()</li><li>actions  派发actions 可以异步派发mutaion  this.$store.dispatch(actions)</li><li>modules  划分模块引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* moduleA.js */</span><br><span class="line"></span><br><span class="line">const moduleA = &#123;</span><br><span class="line">    state: &#123; </span><br><span class="line">        text: &apos;hello&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        addText (state, txt) &#123;</span><br><span class="line">            // 这里的 `state` 对象是模块的局部状态</span><br><span class="line">            state.text += txt</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    actions: &#123;</span><br><span class="line">        setText (&#123; commit &#125;) &#123;</span><br><span class="line">            commit(&apos;addText&apos;, &apos; world&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">        getText (state) &#123;</span><br><span class="line">            return state.text + &apos;!&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default moduleA</span><br></pre></td></tr></table></figure></li></ol><ul><li>a模块引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/* index.js */</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">import moduleA from &apos;./modules/moduleA&apos;</span><br><span class="line">import moduleB from &apos;./modules/moduleB&apos;</span><br><span class="line">import &#123; mutations &#125; from &apos;./mutations&apos;</span><br><span class="line">import actions from &apos;./actions&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        groups: [1]</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        moduleA, // 引入 A 模块</span><br><span class="line">        moduleB, // 引入 B 模块</span><br><span class="line">    &#125;,</span><br><span class="line">    actions, // 根级别的 action</span><br><span class="line">    mutations, // 根级别的 mutations</span><br><span class="line">    </span><br><span class="line">    // 根级别的 getters</span><br><span class="line">    getters: &#123;</span><br><span class="line">        getGroups (state) &#123;</span><br><span class="line">            return state.groups</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h2></li><li>简单封装ajax<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">/* http.js */</span><br><span class="line">import &apos;whatwg-fetch&apos;</span><br><span class="line"></span><br><span class="line">// HTTP 工具类</span><br><span class="line">export default class Http &#123;</span><br><span class="line">    static async request(method, url, data) &#123;</span><br><span class="line">        const param = &#123;</span><br><span class="line">            method: method,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        if (method === &apos;GET&apos;) &#123;</span><br><span class="line">            url += this.formatQuery(data)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            param[&apos;body&apos;] = JSON.stringify(data)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Tips.loading(); // 可调用 loading 组件</span><br><span class="line"></span><br><span class="line">        return fetch(url, param).then(response =&gt; this.isSuccess(response))</span><br><span class="line">                .then(response =&gt; &#123;</span><br><span class="line">                    return response.json()</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断请求是否成功</span><br><span class="line">    static isSuccess(res) &#123;</span><br><span class="line">        if (res.status &gt;= 200 &amp;&amp; res.status &lt; 300) &#123;</span><br><span class="line">            return res</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.requestException(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理异常</span><br><span class="line">    static requestException(res) &#123;</span><br><span class="line">        const error = new Error(res.statusText)</span><br><span class="line"></span><br><span class="line">        error.response = res</span><br><span class="line"></span><br><span class="line">        throw error</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // url处理</span><br><span class="line">    static formatQuery(query) &#123;</span><br><span class="line">        let params = [];</span><br><span class="line"></span><br><span class="line">        if (query) &#123;</span><br><span class="line">            for (let item in query) &#123;</span><br><span class="line">                let vals = query[item];</span><br><span class="line">                if (vals !== undefined) &#123;</span><br><span class="line">                    params.push(item + &apos;=&apos; + query[item])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return params.length ? &apos;?&apos; + params.join(&apos;&amp;&apos;) : &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理 get 请求</span><br><span class="line">    static get(url, data) &#123;</span><br><span class="line">        return this.request(&apos;GET&apos;, url, data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理 put 请求</span><br><span class="line">    static put(url, data) &#123;</span><br><span class="line">        return this.request(&apos;PUT&apos;, url, data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理 post 请求</span><br><span class="line">    static post(url, data) &#123;</span><br><span class="line">        return this.request(&apos;POST&apos;, url, data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理 patch 请求</span><br><span class="line">    static patch(url, data) &#123;</span><br><span class="line">        return this.request(&apos;PATCH&apos;, url, data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理 delete 请求</span><br><span class="line">    static delete(url, data) &#123;</span><br><span class="line">        return this.request(&apos;DELETE&apos;, url, data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个api集合文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* moduleA.js */</span><br><span class="line">import Http from &apos;./http&apos;</span><br><span class="line"></span><br><span class="line">// 获取测试数据</span><br><span class="line">export const getTestData = () =&gt; &#123;</span><br><span class="line">    return Http.get(&apos;https://api.github.com/repos/octokit/octokit.rb&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以省略 url部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* moduleA.js */</span><br><span class="line">import Http from &apos;./http&apos;</span><br><span class="line"></span><br><span class="line">// 获取测试数据</span><br><span class="line">export const getTestData = () =&gt; &#123;</span><br><span class="line">    return Http.get(&apos;/repos/octokit/octokit.rb&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>需要配置vue.config.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* vue.config.js */</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">    </span><br><span class="line">        // string | Object 代理设置</span><br><span class="line">        proxy: &#123;</span><br><span class="line">        </span><br><span class="line">            // 接口是 &apos;/repos&apos; 开头的才用代理</span><br><span class="line">            &apos;/repos&apos;: &#123;</span><br><span class="line">                target: &apos;https://api.github.com&apos;, // 目标地址</span><br><span class="line">                changeOrigin: true, // 是否改变源地址</span><br><span class="line">                // pathRewrite: &#123;&apos;^/api&apos;: &apos;&apos;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 devServer 中 我们配置 proxy 进行接口的代理，将我们本地地址转换为真实的服务器地址，此时我们同样能顺利的获取到数据，不同点在于接口状态变成了 304（重定向)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue-router&quot;&gt;&lt;/a&gt;vue-router&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="router" scheme="http:/dongxin03.github.io/tags/router/"/>
    
      <category term="vuex" scheme="http:/dongxin03.github.io/tags/vuex/"/>
    
      <category term="api" scheme="http:/dongxin03.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>vue 1、构建基础</title>
    <link href="http://dongxin03.github.io/2019/11/25/vue%201%E3%80%81%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://dongxin03.github.io/2019/11/25/vue%201%E3%80%81%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2019-11-25T07:46:47.000Z</published>
    <updated>2019-11-25T07:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://youxiangshijie.cn/vue-jiegoutu.jpg" alt="vue 结构图"></p><ol><li>npm与yarn</li><li>webpack</li><li>环境配置</li><li>接口配置</li><li>单页应用</li><li>多页应用</li><li>开发技巧</li><li>实用工具<h3 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h3></li></ol><ul><li>node -v  查看node版本</li><li>npm -v 查看npm版本<h3 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h3></li><li>npm i -g @vue/cli  // i == install</li><li>yarn global add @vue/cli<h3 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h3></li><li>vue creact my-page</li><li>构建一个基础项目一般需要（Babel\Router\Vuex\CSS Pre-processors）</li><li>npm install  || yarn</li><li>vue ui   //可视化界面<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3></li><li>cd my-page</li><li>yarn serve || npm run serve // 看package.json<h3 id="npm与package-json"><a href="#npm与package-json" class="headerlink" title="npm与package.json"></a>npm与package.json</h3></li><li>npm 是node 的包管理工具</li><li><a href="https://npm-stat.com/charts.html?package=react&from=2019-08-01&to=2019-11-29" target="_blank" rel="noopener">npm-start  可以查看 一定时间范围内的包下载数据</a></li><li>dependencies 生产环境</li><li>devDependencies 开发环境<h4 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h4></li><li>npm init  //生成 package.json 文件（需要手动选择配置）</li><li>npm init -y // 生成 package.json 文件（使用默认配置）</li><li>npm i || npm install  // 安装package.json 下的依赖包</li><li>npm i xxx 安装相应的包 (dependencies)</li><li>npm i xxx –save (dependencies)</li><li>npm i xxx –save-dev (devDependencies)</li><li>npm i -g xxx 全局安装</li><li>npm run dev || npm run start</li><li>npm home xxx //打开包的github  主页</li><li>npm repo xxx //打开包的github  仓库</li><li>yarn outdated xxx //查看包版本</li><li>yarn check  //验证当前项目package.json 里的依赖版本和yarn的lock文件是否匹配</li><li>npm publich || yarn pubilsh    发布版本到npmjs.com<h4 id="第三方插件配置"><a href="#第三方插件配置" class="headerlink" title="第三方插件配置"></a>第三方插件配置</h4></li><li>package.json 文件中 browserslict 在不同的包之间共享目标浏览器和node版本</li><li>“&gt; 1%”  // 表示包含所有使用率 &gt; 1% 浏览器</li><li>“last 2 versions” // 表示包含浏览器最新的两个版本</li><li>“not ie &lt;= 8” // 表示不包含 ie8 以及以下版本</li><li>也可以单独写在 .browserslistrc 文件中</li><li><a href="https://browserl.ist/" target="_blank" rel="noopener">官网可以搜索包含浏览器列表等待</a></li><li>npx browserslist 命令查看适配的浏览器<h3 id="vue-add-命令"><a href="#vue-add-命令" class="headerlink" title="vue add 命令"></a>vue add 命令</h3></li><li>是能安装Vue集成的包</li><li>vue add router  // vue-router</li><li>vue add vuex   //vuex<h3 id="webpack-的使用"><a href="#webpack-的使用" class="headerlink" title="webpack 的使用"></a>webpack 的使用</h3></li><li>vue-cli 2.x 版本 会有相应的webpack配置文件</li><li>vue-cli 3.x 版本 提供了 vue.config.js <h3 id="vue-config-js-的配置"><a href="#vue-config-js-的配置" class="headerlink" title="vue.config.js 的配置"></a>vue.config.js 的配置</h3></li><li>vue-cli 3.x =&gt; 如果你构建的项目中没有该文件，那么你需要在根目录手动创建。<h4 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl"></a>baseUrl</h4></li><li>给项目地址增加二级目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">// localhost:8080/ =&gt; localhost:8080/vue/</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    baseUrl: &apos;vue&apos;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对应webpack 文件中output的publicPath<h4 id="outputDir"><a href="#outputDir" class="headerlink" title="outputDir"></a>outputDir</h4></li><li>项目打包输出地址（默认是dist文件夹）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">// 打包输出到output文件夹</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    outputDir: &apos;output&apos;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对应webpack 文件中output的path<h4 id="productionSourceMap"><a href="#productionSourceMap" class="headerlink" title="productionSourceMap"></a>productionSourceMap</h4></li><li>是否为生产环境构建生成 source map,用于快速定位错误信息</li><li>该配置会修改webpack中devtool项的值为source-map<h4 id="chainWebpack"><a href="#chainWebpack" class="headerlink" title="chainWebpack"></a>chainWebpack</h4></li><li>集成的是webpack-chain <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 用于做相应的合并处理</span><br><span class="line">const merge = require(&apos;webpack-merge&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    // config 参数为已经解析好的 webpack 配置</span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        config.module</span><br><span class="line">            .rule(&apos;images&apos;)</span><br><span class="line">            .use(&apos;url-loader&apos;)</span><br><span class="line">            .tap(options =&gt;</span><br><span class="line">                merge(options, &#123;</span><br><span class="line">                  limit: 5120,</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这里需要注意的是我们使用了 webpack-merge 这一插件，该插件用于做 webpack 配置的合并处理，这样 options 下面的其他值就不会被覆盖或改变。</li><li>以上操作我们可以成功修改webpack中module项里rules规则为图片下的url-loader值，将limit限制改为5M，修改狗的webpack配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;   </span><br><span class="line">                /* config.module.rule(&apos;images&apos;) */</span><br><span class="line">                test: /\.(png|jpe?g|gif|webp)(\?.*)?$/,</span><br><span class="line">                use: [</span><br><span class="line">                    /* config.module.rule(&apos;images&apos;).use(&apos;url-loader&apos;) */</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: &apos;url-loader&apos;,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: 5120,</span><br><span class="line">                            name: &apos;img/[name].[hash:8].[ext]&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="configureWebpack"><a href="#configureWebpack" class="headerlink" title="configureWebpack"></a>configureWebpack</h4><ul><li><p>除了上述使用 chainWebpack 来改变 webpack 内部配置外，我们还可以使用 configureWebpack 来进行修改，两者的不同点在于 chainWebpack 是链式修改，而 configureWebpack 更倾向于整体替换和修改。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    // config 参数为已经解析好的 webpack 配置</span><br><span class="line">    configureWebpack: config =&gt; &#123;</span><br><span class="line">        // config.plugins = []; // 这样会直接将 plugins 置空</span><br><span class="line">        </span><br><span class="line">        // 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空</span><br><span class="line">        return &#123;</span><br><span class="line">            plugins: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>configureWebpack 可以直接是一个对象，也可以是一个函数，如果是对象它会直接使用 webpack-merge 对其进行合并处理，如果是函数，你可以直接使用其 config 参数来修改 webpack 中的配置，或者返回一个对象来进行 merge 处理。</p></li><li><p>vue inspect 查看修改狗的webpack完整配置</p></li><li><p>vue inspect plugins 值查看plugins的内容</p></li></ul><h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h4><ul><li>vue.config.js提供了devServer项用于配置webpack-dev-server的行为</li><li>在运行yarn server 对应的 vue-cli-service serve 其实便是基于webpack-dev-server开启一个本地服务，其常用参数如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: true, // 是否自动打开浏览器页面</span><br><span class="line">        host: &apos;0.0.0.0&apos;, // 指定使用一个 host。默认是 localhost</span><br><span class="line">        port: 8080, // 端口地址</span><br><span class="line">        https: false, // 使用https提供服务</span><br><span class="line">        proxy: null, // string | Object 代理设置</span><br><span class="line">        </span><br><span class="line">        // 提供在服务器内部的其他中间件之前执行自定义中间件的能力</span><br><span class="line">        before: app =&gt; &#123;</span><br><span class="line">          // `app` 是一个 express 实例</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>当然除了以上参数，其支持所有的 webpack-dev-server 中的选项，比如 historyApiFallback 用于重写路由（会在后续的多页应用配置中讲解）、progress 将运行进度输出到控制台等</li><li><a href="https://www.webpackjs.com/configuration/dev-server/" target="_blank" rel="noopener">具体可参考devServer</a><h4 id="默认插件介绍"><a href="#默认插件介绍" class="headerlink" title="默认插件介绍"></a>默认插件介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// vue-loader是 webpack 的加载器，允许你以单文件组件的格式编写 Vue 组件</span><br><span class="line">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);</span><br><span class="line"></span><br><span class="line">// webpack 内置插件，用于创建在编译时可以配置的全局常量</span><br><span class="line">const &#123; DefinePlugin &#125; = require(&apos;webpack&apos;);</span><br><span class="line"></span><br><span class="line">// 用于强制所有模块的完整路径必需与磁盘上实际路径的确切大小写相匹配</span><br><span class="line">const CaseSensitivePathsPlugin = require(&apos;case-sensitive-paths-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 识别某些类型的 webpack 错误并整理，以提供开发人员更好的体验。</span><br><span class="line">const FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line">// 用于在 webpack 构建期间优化、最小化 CSS文件</span><br><span class="line">const OptimizeCssnanoPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// webpack 内置插件，用于根据模块的相对路径生成 hash 作为模块 id, 一般用于生产环境</span><br><span class="line">const &#123; HashedModuleIdsPlugin &#125; = require(&apos;webpack&apos;);</span><br><span class="line"></span><br><span class="line">// 用于根据模板或使用加载器生成 HTML 文件</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 用于在使用 html-webpack-plugin 生成的 html 中添加 &lt;link rel =&apos;preload&apos;&gt; 或 &lt;link rel =&apos;prefetch&apos;&gt;，有助于异步加载</span><br><span class="line">const PreloadPlugin = require(&apos;preload-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 用于将单个文件或整个目录复制到构建目录</span><br><span class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        /* config.plugin(&apos;vue-loader&apos;) */</span><br><span class="line">        new VueLoaderPlugin(), </span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;define&apos;) */</span><br><span class="line">        new DefinePlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;case-sensitive-paths&apos;) */</span><br><span class="line">        new CaseSensitivePathsPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;friendly-errors&apos;) */</span><br><span class="line">        new FriendlyErrorsWebpackPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;extract-css&apos;) */</span><br><span class="line">        new MiniCssExtractPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;optimize-css&apos;) */</span><br><span class="line">        new OptimizeCssnanoPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;hash-module-ids&apos;) */</span><br><span class="line">        new HashedModuleIdsPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;html&apos;) */</span><br><span class="line">        new HtmlWebpackPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;preload&apos;) */</span><br><span class="line">        new PreloadPlugin(),</span><br><span class="line">        </span><br><span class="line">        /* config.plugin(&apos;copy&apos;) */</span><br><span class="line">        new CopyWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>需要注意的是要区分 webpack 内置插件和第三方插件的区别，如果是内置插件则无需安装下载，而外部插件大家可以直接访问：<a href="http://www.npmjs.com/" target="_blank" rel="noopener">www.npmjs.com/</a> 搜索对应的插件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://youxiangshijie.cn/vue-jiegoutu.jpg&quot; alt=&quot;vue 结构图&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;npm与yarn&lt;/li&gt;
&lt;li&gt;webpack&lt;/li&gt;
&lt;li&gt;环境配置&lt;/li&gt;
&lt;li&gt;接口配置&lt;/l
      
    
    </summary>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http:/dongxin03.github.io/tags/vue/"/>
    
      <category term="构建" scheme="http:/dongxin03.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
</feed>
